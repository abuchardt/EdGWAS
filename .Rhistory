yTrain <- y[!fold, ]
yTest <- y[fold, ]
} else {
yTrain <- y[!fold]
yTest <- y[fold]
}
xTrain <- x[!fold, , drop = FALSE]
xTest <- x[fold, , drop = FALSE]
outlist <- edgwas(xTrain, yTrain, rho = NULL, nrho, logrho, rho.min.ratio)
outlist
i=5
if(!is.null(trace)) cat("i: ", i, ", ")
fold <- foldid == i
if (is.matrix(y)) {
yTrain <- y[!fold, ]
yTest <- y[fold, ]
} else {
yTrain <- y[!fold]
yTest <- y[fold]
}
xTrain <- x[!fold, , drop = FALSE]
xTest <- x[fold, , drop = FALSE]
outlist <- edgwas(xTrain, yTrain, rho = NULL, nrho, logrho, rho.min.ratio)
for (j in seq(length(rho))) {
if(!is.null(trace)) cat(".")
w <- expm::sqrtm(outlist$P[[j]]) ## qxq
wy <- yTrain %*% w ## nrow(xTrain)xq
xVex <- matrix(rep(c(xTrain), ncol(w)), ncol = ncol(w)) ## nrow(xTrain)*pxq
wx <- xVex %*% w ## nrow(xTrain)*pxq
#fit <- list(NULL)
for (l in seq(ncol(y))) {
xsubsub <- matrix(wx[,l], ncol = ncol(x)) ## 900*10000
preds <- switch(penalty,
lasso = {
lasFit <- cv.glmnet(x = xsubsub, y = c(wy[, l]))
nz <- which(coef(lasFit, s="lambda.min")[-1] != 0)
if (length(nz) < 1) {
matrix(mean(wy[,l]), nrow = nrow(yTest))
} else {
trainData <- data.frame(y = wy[,l], x = I(xsubsub[,nz]))
lmFit <- lm(y ~ x, data = trainData)
cbind(1, xTest[,nz]) %*% coef(lmFit)
}
},
ridge = {
ridgeFit <- cv.glmnet(x = xsubsub,
y = c(wy[, l]),
alpha = 0)
cbind(1, xTest) %*% matrix(coef(ridgeFit), ncol = 1)
}
)
predmat[[j]][fold, l] <- preds
}
}
for (j in seq(length(rho))) {
if(!is.null(trace)) cat(".")
w <- expm::sqrtm(outlist$P[[j]]) ## qxq
wy <- yTrain %*% w ## nrow(xTrain)xq
xVex <- matrix(rep(c(xTrain), ncol(w)), ncol = ncol(w)) ## nrow(xTrain)*pxq
wx <- xVex %*% w ## nrow(xTrain)*pxq
#fit <- list(NULL)
for (l in seq(ncol(y))) {
xsubsub <- matrix(wx[,l], ncol = ncol(x)) ## 900*10000
preds <- switch(penalty,
lasso = {
lasFit <- glmnet::cv.glmnet(x = xsubsub, y = c(wy[, l]))
nz <- which(coef(lasFit, s="lambda.min")[-1] != 0)
if (length(nz) < 1) {
matrix(mean(wy[,l]), nrow = nrow(yTest))
} else {
trainData <- data.frame(y = wy[,l], x = I(xsubsub[,nz]))
lmFit <- lm(y ~ x, data = trainData)
cbind(1, xTest[,nz]) %*% coef(lmFit)
}
},
ridge = {
ridgeFit <- glmnet::cv.glmnet(x = xsubsub,
y = c(wy[, l]),
alpha = 0)
cbind(1, xTest) %*% matrix(coef(ridgeFit), ncol = 1)
}
)
predmat[[j]][fold, l] <- preds
}
}
N <- 500 #
q <- 10 #
p <- 10 # 20 #
set.seed(1)
x <- matrix(sample(0:2, N*p, replace=TRUE), nrow=N, ncol=p)
B <- matrix(0, nrow = p, ncol = q)
B[1, 1:2] <- 1
y <- x %*% B + matrix(rnorm(N*q), nrow = N, ncol = q)
#' set.seed(1)
#' x <- matrix(sample(0:2, N*p, replace=TRUE), nrow=N, ncol=p)
#' B <- matrix(0, nrow = p, ncol = q)
#' B[1, 1:2] <- 1
#' y <- x %*% B + matrix(rnorm(N*q), nrow = N, ncol = q)
#' ###
#' pc <- cv.edgwas(x, y, nfolds = 5, penalty = "ridge", nrho = 10, trace = 1)
#'
#' @export cv.edgwas
#'
cv.edgwas <- function(x, y, rho = NULL, nfolds = 10, type.measure = "mse",
penalty = c("ridge", "lasso"), trace = NULL,
nrho = ifelse(is.null(rho), 20, length(rho)), logrho = FALSE,
rho.min.ratio = 10e-04) {
#if (missing(type.measure)) {
#  type.measure <- "default"
#} else type.measure <- match.arg(type.measure)
penalty <- match.arg(penalty)
if (!is.null(rho) && length(rho) < 2)
stop("Need more than one value of rho for cv.edgwas")
edgwas.call <- match.call(expand.dots = TRUE)
edgwas.call[[1]] <- as.name("edgwas")
edgwas.object <- edgwas(x, y, rho, nrho, logrho, rho.min.ratio)
edgwas.object$call <- edgwas.call
if (nfolds < 3)
stop("nfolds must be bigger than 3; nfolds=10 recommended")
rho <- edgwas.object$rho
fun <- paste("cv", type.measure, sep = ".")
cvstuff <- do.call(fun, list(rho, x, y, nfolds, penalty, type.measure,
trace, logrho, nrho, rho.min.ratio))
cvm <- cvstuff$cvm
cvsd <- cvstuff$cvsd
cvname <- names(cvstuff$type.measure)
minCrit <- cvm
rhoMin <- rho[which.min(minCrit)]
idx <- max(which(rev(minCrit[seq(which.min(minCrit))]) < minCrit[which.min(minCrit)] + cvsd[which.min(minCrit)]))
rho1se <- rev(rho[seq(which.min(minCrit))])[idx]
out <- list(rho = rho, cvm = cvm, cvsd = cvsd,
cvup = cvm + cvsd,
cvlo = cvm - cvsd,
name = cvname,
rho.min = rhoMin,
rho.1se = rho1se,
edgwas.fit = edgwas.object)
class(out) <- "cv.edgwas"
out
}
# Cross-validation
cv.mse <- function(rho, x, y, nfolds, penalty, type.measure, trace,
logrho, rho.min.ratio) {
nrho <- length(rho)
foldid <- sample(rep(seq(nfolds), length = nrow(x)))
predmat <- vector(mode = "list", length = nrho)
predmat <- lapply(predmat, FUN = function(l) matrix(NA, nrow(y), ncol(y)))
for (i in seq(nfolds)) {
if(!is.null(trace)) cat("i: ", i, ", ")
fold <- foldid == i
if (is.matrix(y)) {
yTrain <- y[!fold, ]
yTest <- y[fold, ]
} else {
yTrain <- y[!fold]
yTest <- y[fold]
}
xTrain <- x[!fold, , drop = FALSE]
xTest <- x[fold, , drop = FALSE]
outlist <- edgwas(xTrain, yTrain, rho = NULL, nrho, logrho, rho.min.ratio)
for (j in seq(length(rho))) {
if(!is.null(trace)) cat(".")
w <- expm::sqrtm(outlist$P[[j]]) ## qxq
wy <- yTrain %*% w ## nrow(xTrain)xq
xVex <- matrix(rep(c(xTrain), ncol(w)), ncol = ncol(w)) ## nrow(xTrain)*pxq
wx <- xVex %*% w ## nrow(xTrain)*pxq
#fit <- list(NULL)
for (l in seq(ncol(y))) {
xsubsub <- matrix(wx[,l], ncol = ncol(x)) ## 900*10000
preds <- switch(penalty,
lasso = {
lasFit <- glmnet::cv.glmnet(x = xsubsub, y = c(wy[, l]))
nz <- which(coef(lasFit, s="lambda.min")[-1] != 0)
if (length(nz) < 1) {
matrix(mean(wy[,l]), nrow = nrow(yTest))
} else {
trainData <- data.frame(y = wy[,l], x = I(xsubsub[,nz]))
lmFit <- lm(y ~ x, data = trainData)
cbind(1, xTest[,nz]) %*% coef(lmFit)
}
},
ridge = {
ridgeFit <- glmnet::cv.glmnet(x = xsubsub,
y = c(wy[, l]),
alpha = 0)
cbind(1, xTest) %*% matrix(coef(ridgeFit), ncol = 1)
}
)
predmat[[j]][fold, l] <- preds
}
}
if(!is.null(trace)) cat("\n")
}
N <- nrow(y)
cvraw <- lapply(predmat, FUN = function(l) (y - l)^2)
cvm <- sapply(cvraw, mean, na.rm = TRUE)
#cvsd <- sapply(cvraw, sd, na.rm = TRUE)
cvsd <- sqrt(sapply(cvraw, FUN = function(l) mean((l - cvm)^2, na.rm = TRUE))/(N-1))
#cvm <- rowMeans(cvraw)
#cvsd1 <- sqrt(apply((cvraw - cvm)^2, 2, sum, na.rm = TRUE)/(nfolds - 1))
#cvsd2 <- apply(cvraw, 2,  sd, na.rm = TRUE)
names(type.measure) <- "Mean-Squared Error"
list(cvm = cvm, cvsd = cvsd, type.measure = type.measure)
}
cv.edgwas(x, y, nfolds = 5, penalty = "ridge", nrho = 10, trace = 1)
library(EdGwas)
N <- 500 #
q <- 10 #
p <- 10 # 20 #
set.seed(1)
x <- matrix(sample(0:2, N*p, replace=TRUE), nrow=N, ncol=p)
B <- matrix(0, nrow = p, ncol = q)
B[1, 1:2] <- 1
y <- x %*% B + matrix(rnorm(N*q), nrow = N, ncol = q)
pc <- cv.edgwas(x, y, nfolds = 5, penalty = "ridge", nrho = 10, trace = 1)
#' set.seed(1)
#' x <- matrix(sample(0:2, N*p, replace=TRUE), nrow=N, ncol=p)
#' B <- matrix(0, nrow = p, ncol = q)
#' B[1, 1:2] <- 1
#' y <- x %*% B + matrix(rnorm(N*q), nrow = N, ncol = q)
#' ###
#' pc <- cv.edgwas(x, y, nfolds = 5, penalty = "ridge", nrho = 10, trace = 1)
#'
#' @export cv.edgwas
#'
cv.edgwas <- function(x, y, rho = NULL, nfolds = 10, type.measure = "mse",
penalty = c("ridge", "lasso"), trace = NULL,
nrho = ifelse(is.null(rho), 20, length(rho)), logrho = FALSE,
rho.min.ratio = 10e-04) {
#if (missing(type.measure)) {
#  type.measure <- "default"
#} else type.measure <- match.arg(type.measure)
penalty <- match.arg(penalty)
if (!is.null(rho) && length(rho) < 2)
stop("Need more than one value of rho for cv.edgwas")
edgwas.call <- match.call(expand.dots = TRUE)
edgwas.call[[1]] <- as.name("edgwas")
edgwas.object <- edgwas(x, y, rho, nrho, logrho, rho.min.ratio)
edgwas.object$call <- edgwas.call
if (nfolds < 3)
stop("nfolds must be bigger than 3; nfolds=10 recommended")
rho <- edgwas.object$rho
fun <- paste("cv", type.measure, sep = ".")
cvstuff <- do.call(fun, list(rho, x, y, nfolds, penalty, type.measure,
trace, logrho, rho.min.ratio))
cvm <- cvstuff$cvm
cvsd <- cvstuff$cvsd
cvname <- names(cvstuff$type.measure)
minCrit <- cvm
rhoMin <- rho[which.min(minCrit)]
idx <- max(which(rev(minCrit[seq(which.min(minCrit))]) < minCrit[which.min(minCrit)] + cvsd[which.min(minCrit)]))
rho1se <- rev(rho[seq(which.min(minCrit))])[idx]
out <- list(rho = rho, cvm = cvm, cvsd = cvsd,
cvup = cvm + cvsd,
cvlo = cvm - cvsd,
name = cvname,
rho.min = rhoMin,
rho.1se = rho1se,
edgwas.fit = edgwas.object)
class(out) <- "cv.edgwas"
out
}
pc <- cv.edgwas(x, y, nfolds = 5, penalty = "ridge", nrho = 10, trace = 1)
library(EdGwas)
randIndex <- function(clus1, clus2) {
a <- sum(clus1[upper.tri(clus1)] == 0 & clus2[upper.tri(clus2)] == 0, na.rm = TRUE)
b <- sum(clus1[upper.tri(clus1)] == 1 & clus2[upper.tri(clus2)] == 1, na.rm = TRUE)
c <- sum(clus1[upper.tri(clus1)] == 0 & clus2[upper.tri(clus2)] == 1, na.rm = TRUE)
d <- sum(clus1[upper.tri(clus1)] == 1 & clus2[upper.tri(clus2)] == 0, na.rm = TRUE)
RI <- (a + b)/(a + b + c + d)
list(RI = RI)
}
createB <- function(p, q, b1, b2, b3) {
B <- list()
#
B[[1]] <- matrix(0, nrow = p, ncol = q)
#
B[[2]] <- matrix(1, nrow = p, ncol = q)
#
B[[3]] <- matrix(0, nrow = p, ncol = q)
B[[3]][1, 1:2] <- b1
B[[4]] <- matrix(0, nrow = p, ncol = q)
B[[4]][1, 1:2] <- b2
B[[5]] <- matrix(0, nrow = p, ncol = q)
B[[5]][1, 1:2] <- b3
#
B[[6]] <- matrix(0, nrow = p, ncol = q)
B[[6]][1, 1:5] <- b1
B[[7]] <- matrix(0, nrow = p, ncol = q)
B[[7]][1, 1:5] <- b2
B[[8]] <- matrix(0, nrow = p, ncol = q)
B[[8]][1, 1:5] <- b3
#
B[[9]] <- matrix(0, nrow = p, ncol = q)
B[[9]][1, 1:2] <- b1
B[[9]][2, 3:4] <- b1
B[[10]] <- matrix(0, nrow = p, ncol = q)
B[[10]][1, 1:2] <- b2
B[[10]][2, 3:4] <- b2
B[[11]] <- matrix(0, nrow = p, ncol = q)
B[[11]][1, 1:2] <- b3
B[[11]][2, 3:4] <- b3
#
B[[12]] <- matrix(0, nrow = p, ncol = q)
B[[12]][1, 1:4] <- b1
B[[12]][2, 5:8] <- b1
B[[13]] <- matrix(0, nrow = p, ncol = q)
B[[13]][1, 1:4] <- b2
B[[13]][2, 5:8] <- b2
B[[14]] <- matrix(0, nrow = p, ncol = q)
B[[14]][1, 1:4] <- b3
B[[14]][2, 5:8] <- b3
#
B[[15]] <- matrix(0, nrow = p, ncol = q)
B[[15]][1, 1:2] <- b1
B[[15]][2, 1:2] <- b1
B[[16]] <- matrix(0, nrow = p, ncol = q)
B[[16]][1, 1:2] <- b2
B[[16]][2, 1:2] <- b2
B[[17]] <- matrix(0, nrow = p, ncol = q)
B[[17]][1, 1:2] <- b3
B[[17]][2, 1:2] <- b3
#
B[[18]] <- matrix(0, nrow = p, ncol = q)
B[[18]][1, 1] <- b2
B[[18]][1, 2] <- b1
B[[18]][2, 1] <- b1
B[[18]][2, 2] <- b2
B[[19]] <- matrix(0, nrow = p, ncol = q)
B[[19]][1, 1] <- b3
B[[19]][1, 2] <- b1
B[[19]][2, 1] <- b1
B[[19]][2, 2] <- b3
B
}
createClus <- function(p, q) {
clus1 <- list()
#
clus1[[1]] <-  matrix(0, nrow = q, ncol = q)
#
clus1[[2]] <-  matrix(1, nrow = q, ncol = q)
diag(clus1[[1]]) <- 0
#
clus1[[3]] <- matrix(0, nrow = q, ncol = q)
clus1[[3]][1:2, 1:2] <- 1
diag(clus1[[3]]) <- 0
clus1[[5]] <- clus1[[4]] <- clus1[[3]]
#
clus1[[6]] <- matrix(0, nrow = q, ncol = q)
clus1[[6]][1:5, 1:5] <- 1
diag(clus1[[6]]) <- 0
clus1[[8]] <- clus1[[7]] <- clus1[[6]]
#
clus1[[9]] <- matrix(0, nrow = q, ncol = q)
clus1[[9]][1:2, 1:2] <- 1
clus1[[9]][3:4, 3:4] <- 1
diag(clus1[[9]]) <- 0
clus1[[11]] <- clus1[[10]] <- clus1[[9]]
#
clus1[[12]] <- matrix(0, nrow = q, ncol = q)
clus1[[12]][1:4, 1:4] <- 1
clus1[[12]][5:8, 5:8] <- 1
diag(clus1[[12]]) <- 0
clus1[[14]] <- clus1[[13]] <- clus1[[12]]
clus1[[19]] <- clus1[[18]] <- clus1[[17]] <- clus1[[16]] <- clus1[[15]] <- clus1[[3]]
clus1
}
#########
# RIDGE (penalise diag = FALSE & LOW DIMENSIONAL)#
#########
b1 <- 0.1
b2 <- 1
b3 <- 2
N <- 1000
q <- 10
p <- 20
set.seed(1)
X <- matrix(sample(0:2, N*p, replace=TRUE), nrow=N, ncol=p)
SigmaE <- diag(x = 1, nrow = q, ncol = q)
B <- createB(p, q, b1, b2, b3)
clus1 <- createClus(p, q)
YY <- X %*% B[[k]] + mvrnorm(n = N, rep(0, q), SigmaE)
Y <- scale(YY)
YY <- X %*% B[[1]] + mvrnorm(n = N, rep(0, q), SigmaE)
Y <- scale(YY)
library(MASS)
YY <- X %*% B[[1]] + mvrnorm(n = N, rep(0, q), SigmaE)
Y <- scale(YY)
x=X
y=Y
rho = NULL
nfolds = 10
type.measure = "mse"
penalty = "ridge"
trace = 1
logrho = FALSE
nrho=40
rho.min.ratio = 10e-04
edgwas.call <- match.call(expand.dots = TRUE)
edgwas.call[[1]] <- as.name("edgwas")
edgwas.object <- edgwas(x, y, rho, nrho, logrho, rho.min.ratio)
edgwas.object$call <- edgwas.call
rho <- edgwas.object$rho
nrho <- length(rho)
foldid <- sample(rep(seq(nfolds), length = nrow(x)))
predmat <- vector(mode = "list", length = nrho)
predmat <- lapply(predmat, FUN = function(l) matrix(NA, nrow(y), ncol(y)))
i=1
if(!is.null(trace)) cat("i: ", i, ", ")
fold <- foldid == i
if (is.matrix(y)) {
yTrain <- y[!fold, ]
yTest <- y[fold, ]
} else {
yTrain <- y[!fold]
yTest <- y[fold]
}
xTrain <- x[!fold, , drop = FALSE]
xTest <- x[fold, , drop = FALSE]
outlist <- edgwas(xTrain, yTrain, rho = NULL, nrho, logrho, rho.min.ratio)
for (j in seq(length(rho))) {
if(!is.null(trace)) cat(".")
w <- expm::sqrtm(outlist$P[[j]]) ## qxq
wy <- yTrain %*% w ## nrow(xTrain)xq
xVex <- matrix(rep(c(xTrain), ncol(w)), ncol = ncol(w)) ## nrow(xTrain)*pxq
wx <- xVex %*% w ## nrow(xTrain)*pxq
#fit <- list(NULL)
for (l in seq(ncol(y))) {
xsubsub <- matrix(wx[,l], ncol = ncol(x)) ## 900*10000
preds <- switch(penalty,
lasso = {
lasFit <- glmnet::cv.glmnet(x = xsubsub, y = c(wy[, l]))
nz <- which(coef(lasFit, s="lambda.min")[-1] != 0)
if (length(nz) < 1) {
matrix(mean(wy[,l]), nrow = nrow(yTest))
} else {
trainData <- data.frame(y = wy[,l], x = I(xsubsub[,nz]))
lmFit <- lm(y ~ x, data = trainData)
cbind(1, xTest[,nz]) %*% coef(lmFit)
}
},
ridge = {
ridgeFit <- glmnet::cv.glmnet(x = xsubsub,
y = c(wy[, l]),
alpha = 0)
cbind(1, xTest) %*% matrix(coef(ridgeFit), ncol = 1)
}
)
predmat[[j]][fold, l] <- preds
}
}
for (i in seq(nfolds)) {
if(!is.null(trace)) cat("i: ", i, ", ")
fold <- foldid == i
if (is.matrix(y)) {
yTrain <- y[!fold, ]
yTest <- y[fold, ]
} else {
yTrain <- y[!fold]
yTest <- y[fold]
}
xTrain <- x[!fold, , drop = FALSE]
xTest <- x[fold, , drop = FALSE]
outlist <- edgwas(xTrain, yTrain, rho = NULL, nrho, logrho, rho.min.ratio)
for (j in seq(length(rho))) {
if(!is.null(trace)) cat(".")
w <- expm::sqrtm(outlist$P[[j]]) ## qxq
wy <- yTrain %*% w ## nrow(xTrain)xq
xVex <- matrix(rep(c(xTrain), ncol(w)), ncol = ncol(w)) ## nrow(xTrain)*pxq
wx <- xVex %*% w ## nrow(xTrain)*pxq
#fit <- list(NULL)
for (l in seq(ncol(y))) {
xsubsub <- matrix(wx[,l], ncol = ncol(x)) ## 900*10000
preds <- switch(penalty,
lasso = {
lasFit <- glmnet::cv.glmnet(x = xsubsub, y = c(wy[, l]))
nz <- which(coef(lasFit, s="lambda.min")[-1] != 0)
if (length(nz) < 1) {
matrix(mean(wy[,l]), nrow = nrow(yTest))
} else {
trainData <- data.frame(y = wy[,l], x = I(xsubsub[,nz]))
lmFit <- lm(y ~ x, data = trainData)
cbind(1, xTest[,nz]) %*% coef(lmFit)
}
},
ridge = {
ridgeFit <- glmnet::cv.glmnet(x = xsubsub,
y = c(wy[, l]),
alpha = 0)
cbind(1, xTest) %*% matrix(coef(ridgeFit), ncol = 1)
}
)
predmat[[j]][fold, l] <- preds
}
}
if(!is.null(trace)) cat("\n")
}
N <- nrow(y)
cvraw <- lapply(predmat, FUN = function(l) (y - l)^2)
cvm <- sapply(cvraw, mean, na.rm = TRUE)
#cvsd <- sapply(cvraw, sd, na.rm = TRUE)
cvsd <- sqrt(sapply(cvraw, FUN = function(l) mean((l - cvm)^2, na.rm = TRUE))/(N-1))
rho
10e-04
library(EdGwas)
install.packages(c("MESS", "plotly"))
library(EdGWAS)
devtools::document()
library(EdGWAS)
devtools::document()
devtools::document()
library(geneJAM)
