#' Make predictions from a "cv.edgwas" object
#'
#' This function makes predictions from a cross-validated edgwas model, using the stored "edgwas.fit" object, and the optimal value chosen for rho.
#'
#' @param object Fitted "cv.edgwas" object.
#' @param rho Value(s) of the penalty parameter rho at which predictions are required. Default is the value \code{rho = "rho.min"} stored in the object. Alternatively \code{rho = "rho.1se"} can be used. If rho is numeric, it is taken as the value(s) to be used.
#' @param newPS Matrix of new values for x (must be polygenic scores - can be generated by \code{\link{ps.edgwas}}) at which predictions are to be made. This argument is not used for \code{type = "coefficients"}.
#' @param ... Other arguments to predict.
#'
#' @return The object returned depends on the ... argument which is passed on to the predict method for edgwas objects.
#'
#' @examples
#'
#' N <- 1000
#' q <- 10
#' p <- 100
#' set.seed(1)
#' x <- matrix(sample(0:2, N*p, replace=TRUE), nrow=N, ncol=p)
#' B <- matrix(0, nrow = p, ncol = q)
#' B[1, 1:2] <- 5
#' y <- x %*% B + matrix(rnorm(N*q), nrow = N, ncol = q)
#' ###
#' pc <- cv.edgwas(x[-(1:100), ], y[-(1:100), ], scores = FALSE)
#' ps <- ps.edgwas(x[1:100, ], y[1:100, ])$PS
#' newy <- predict(pc, newPS = ps, rho = "rho.min")
#'
#' @export predict.cv.edgwas
#'

predict.cv.edgwas <- function(object, newPS, rho = c("rho.min","rho.1se"), ...){
  if(is.numeric(rho))
    rho <- rho
  else
    if(is.character(rho)){
      rho <- match.arg(rho)
      rho <- object[[rho]]
    }
  else stop("Invalid form for rho")
  predict(object$edgwas.fit, newPS, rho = rho, ...)
}
