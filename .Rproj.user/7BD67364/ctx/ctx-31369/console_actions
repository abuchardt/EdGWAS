{
    "data" : [
        "N <- 1000 #",
        "> ",
        "q <- 10 #",
        "> ",
        "p <- 1000 #",
        "> ",
        "set.seed(1)",
        "> ",
        "# Sample 1",
        "> ",
        "X0 <- matrix(rbinom(n = N*p, size = 2, prob = 0.3), nrow=N, ncol=p)",
        "> ",
        "B <- matrix(0, nrow = p, ncol = q)",
        "> ",
        "B[1, 1:2] <- 2",
        "> ",
        "y0 <- X0 %*% B + matrix(rnorm(N*q), nrow = N, ncol = q)",
        "> ",
        "#y0 <- apply(y0, 2, scale)",
        "> ",
        "beta <- ps.edgwas(X0, y0)$beta",
        "> ",
        "# Sample 2",
        "> ",
        "X <- matrix(rbinom(n = N*p, size = 2, prob = 0.3), nrow=N, ncol=p)",
        "> ",
        "y <- X %*% B + matrix(rnorm(N*q), nrow = N, ncol = q)",
        "> ",
        "#y <- apply(y, 2, scale)",
        "> ",
        "#Sigma <- diag(1, q)",
        "> ",
        "#Sigma[1, 2] <- Sigma[2, 1] <- .8",
        "> ",
        "#y <- X %*% B + MASS::mvrnorm(n = N, mu = rep(0, q), Sigma = Sigma)",
        "> ",
        "x <- X %*% beta",
        "> ",
        "#x <- MASS::mvrnorm(n = N, mu = rep(0, q), Sigma = diag(1, q))",
        "> ",
        "###",
        "> ",
        "edgwas.call <- match.call(expand.dots = TRUE)",
        "> ",
        "edgwas.call[[1]] <- as.name(\"edgwas\")",
        "> ",
        "edgwas.object <- edgwas(x, y, rho, nrho, logrho, rho.min.ratio)",
        "> ",
        "edgwas.object$call <- edgwas.call",
        "> ",
        "rho <- edgwas.object$rho",
        "> ",
        "PS <- edgwas.object$PS",
        "> ",
        "P <- edgwas.object$P",
        "> ",
        "Sigma <- edgwas.object$Sigma",
        "> ",
        "foldid <- sample(rep(seq(nfolds), length = nrow(y)))",
        "> ",
        "outlist = vector(mode = \"list\", length = nfolds)",
        "> ",
        "for (i in seq(nfolds)) {",
        "+ ",
        "    fold <- foldid == i",
        "+ ",
        "",
        "+ ",
        "    yTrain <- y[!fold, ]",
        "+ ",
        "    xTrain <- PS[!fold, ]",
        "+ ",
        "",
        "+ ",
        "    outlist[[i]] <- edgwas(x = xTrain, y = yTrain, rho, nrho, logrho, rho.min.ratio)",
        "+ ",
        "  }",
        "> ",
        "cvraw <- vector(mode = \"list\", length = nrho)",
        "> ",
        "cvraw <- lapply(cvraw, FUN = function(l) matrix(NA, nrow(y), ncol(y)))",
        "> ",
        "cvmFold <- vector(mode = \"list\", length = nrho)",
        "> ",
        "cvmFold <- lapply(cvmFold, FUN = function(l) matrix(NA, nfolds, ncol(y)))",
        "> ",
        "fold <- foldid == i",
        "> ",
        "predsList <- predict(outlist[[i]], newPS = PS[fold, ], type = \"link\")",
        "Error in 1:q : NA/NaN argument\n",
        "> ",
        "#' newy <- predict(pc, newPS = ps[(1:100), ], rho = max(pc$rho))[[1]]",
        "> ",
        "#'",
        "> ",
        "#' mean((newy[,1] - y[1:100, 1])^2)",
        "> ",
        "#' pss <- ps[-(1:100), 1]",
        "> ",
        "#' lmfit <- lm(y[-(1:100), 1] ~ pss)",
        "> ",
        "#' newylm <- predict(lmfit, newdata = data.frame(pss = ps[(1:100), 1]))",
        "> ",
        "#' mean((newylm - y[1:100, 1])^2)",
        "> ",
        "#'",
        "> ",
        "#' @export",
        "> ",
        "#'",
        "> ",
        "predict.edgwas <- function(object, newPS, rho = NULL,",
        "+ ",
        "                           type = c(\"link\", \"coefficients\"), #\"response\",\"nonzero\",\"class\"),",
        "+ ",
        "                           #exact = FALSE, newoffset",
        "+ ",
        "                           ...",
        "+ ",
        "                           ){",
        "+ ",
        "  type <- match.arg(type)",
        "+ ",
        "  if (missing(newPS)){",
        "+ ",
        "    if (!match(type, \"coefficients\", FALSE))",
        "+ ",
        "      stop(\"Value for 'newPS' missing\")",
        "+ ",
        "  }",
        "+ ",
        "",
        "+ ",
        "  if (is.null(rho)){",
        "+ ",
        "    rho <- object$rho",
        "+ ",
        "  } else if (is.numeric(rho)) {",
        "+ ",
        "    if (!all(rho %in% object$rho))",
        "+ ",
        "      stop(\"rho needs to be a value used to create the model\")",
        "+ ",
        "  } else stop(\"Invalid form for rho\")",
        "+ ",
        "",
        "+ ",
        "  nrho <- length(rho)",
        "+ ",
        "  whichRho <- match(rho, object$rho, FALSE)",
        "+ ",
        "  nouts <- ncol(newPS)",
        "+ ",
        "",
        "+ ",
        "  if(FALSE) {",
        "+ ",
        "",
        "+ ",
        "    ncoef <- lapply(seq(nouts), FUN = function(l) {",
        "+ ",
        "      out <- rbind(object$alpha[l, whichRho], object$beta[l, whichRho])",
        "+ ",
        "      colnames(out) <- paste0(\"rho\", whichRho)",
        "+ ",
        "      rownames(out) <- c(\"alpha\", \"beta\")",
        "+ ",
        "      out",
        "+ ",
        "    })",
        "+ ",
        "    names(ncoef) <- paste0(\"y\", seq(nouts))",
        "+ ",
        "",
        "+ ",
        "    if (type == \"coefficients\")",
        "+ ",
        "      return(ncoef)",
        "+ ",
        "  }",
        "+ ",
        "",
        "+ ",
        "  nfit <- vector(mode = \"list\", length = nrho)",
        "+ ",
        "  rhoseq <- seq(nrho)",
        "+ ",
        "",
        "+ ",
        "  for (j in rhoseq) {",
        "+ ",
        "",
        "+ ",
        "    if(all(object$A[[j]] == 0)) break",
        "+ ",
        "",
        "+ ",
        "    xVec <- as.vector(newPS)",
        "+ ",
        "    traitID <- as.factor(rep(1:nouts, each = nrow(y[fold, ])))",
        "+ ",
        "    nfit[[j]] <- predict(object$summary[[j]],",
        "+ ",
        "                         newdata = data.frame(xVec, traitID),",
        "+ ",
        "                         re.form = NA)",
        "+ ",
        "",
        "+ ",
        "  }",
        "+ ",
        "",
        "+ ",
        "  #names(nfit) <- paste0(\"rho\", whichRho)",
        "+ ",
        "  nfit",
        "+ ",
        "}",
        "> ",
        "predsList <- predict(outlist[[i]], newPS = PS[fold, ], type = \"link\")",
        "> ",
        "ps0 <- PS[!fold, l]",
        "Error: object 'l' not found\n",
        "> ",
        "matrix(1:4, 2)",
        "     [,1] [,2]\n[1,]    1    3\n[2,]    2    4\n",
        "> ",
        "#' newy <- predict(pc, newPS = ps[(1:100), ], rho = max(pc$rho))[[1]]",
        "> ",
        "#'",
        "> ",
        "#' mean((newy[,1] - y[1:100, 1])^2)",
        "> ",
        "#' pss <- ps[-(1:100), 1]",
        "> ",
        "#' lmfit <- lm(y[-(1:100), 1] ~ pss)",
        "> ",
        "#' newylm <- predict(lmfit, newdata = data.frame(pss = ps[(1:100), 1]))",
        "> ",
        "#' mean((newylm - y[1:100, 1])^2)",
        "> ",
        "#'",
        "> ",
        "#' @export",
        "> ",
        "#'",
        "> ",
        "predict.edgwas <- function(object, newPS, rho = NULL,",
        "+ ",
        "                           type = c(\"link\", \"coefficients\"), #\"response\",\"nonzero\",\"class\"),",
        "+ ",
        "                           #exact = FALSE, newoffset",
        "+ ",
        "                           ...",
        "+ ",
        "                           ){",
        "+ ",
        "  type <- match.arg(type)",
        "+ ",
        "  if (missing(newPS)){",
        "+ ",
        "    if (!match(type, \"coefficients\", FALSE))",
        "+ ",
        "      stop(\"Value for 'newPS' missing\")",
        "+ ",
        "  }",
        "+ ",
        "",
        "+ ",
        "  if (is.null(rho)){",
        "+ ",
        "    rho <- object$rho",
        "+ ",
        "  } else if (is.numeric(rho)) {",
        "+ ",
        "    if (!all(rho %in% object$rho))",
        "+ ",
        "      stop(\"rho needs to be a value used to create the model\")",
        "+ ",
        "  } else stop(\"Invalid form for rho\")",
        "+ ",
        "",
        "+ ",
        "  nrho <- length(rho)",
        "+ ",
        "  whichRho <- match(rho, object$rho, FALSE)",
        "+ ",
        "  nouts <- ncol(newPS)",
        "+ ",
        "",
        "+ ",
        "  if(FALSE) {",
        "+ ",
        "",
        "+ ",
        "    ncoef <- lapply(seq(nouts), FUN = function(l) {",
        "+ ",
        "      out <- rbind(object$alpha[l, whichRho], object$beta[l, whichRho])",
        "+ ",
        "      colnames(out) <- paste0(\"rho\", whichRho)",
        "+ ",
        "      rownames(out) <- c(\"alpha\", \"beta\")",
        "+ ",
        "      out",
        "+ ",
        "    })",
        "+ ",
        "    names(ncoef) <- paste0(\"y\", seq(nouts))",
        "+ ",
        "",
        "+ ",
        "    if (type == \"coefficients\")",
        "+ ",
        "      return(ncoef)",
        "+ ",
        "  }",
        "+ ",
        "",
        "+ ",
        "  nfit <- vector(mode = \"list\", length = nrho)",
        "+ ",
        "  rhoseq <- seq(nrho)",
        "+ ",
        "",
        "+ ",
        "  for (j in rhoseq) {",
        "+ ",
        "",
        "+ ",
        "    if(all(object$A[[j]] == 0)) break",
        "+ ",
        "",
        "+ ",
        "    xVec <- as.vector(newPS)",
        "+ ",
        "    traitID <- as.factor(rep(1:nouts, each = nrow(y[fold, ])))",
        "+ ",
        "    pred <- predict(object$summary[[j]],",
        "+ ",
        "                         newdata = data.frame(xVec, traitID),",
        "+ ",
        "                         re.form = NA)",
        "+ ",
        "    nfit[[j]] <- matrix(pred, ncol = nouts)",
        "+ ",
        "",
        "+ ",
        "  }",
        "+ ",
        "",
        "+ ",
        "  #names(nfit) <- paste0(\"rho\", whichRho)",
        "+ ",
        "  nfit",
        "+ ",
        "}",
        "> ",
        "predsList <- predict(outlist[[i]], newPS = PS[fold, ], type = \"link\")",
        "> ",
        "predsList[[j]]",
        "Error: object 'j' not found\n",
        "> ",
        "j=40",
        "> ",
        "j=1",
        "> ",
        "predsList[[j]]",
        "              [,1]       [,2]          [,3]          [,4]\n  [1,]  2.00595559  2.3500245 -0.0143626264 -0.0008007397\n  [2,]  1.80317104  0.7964395  0.0329737377 -0.0409974319\n  [3,]  0.94822699  0.6274565  0.0103064864 -0.0177396924\n  [4,]  1.87763670  1.1650758  0.0209753506 -0.0068322609\n  [5,]  0.47107785  0.5954293 -0.0168861663 -0.0467671522\n  [6,]  0.93671786  1.2366396  0.0683487609 -0.0283313557\n  [7,]  2.66162370  2.5698733 -0.0363199629 -0.0242119429\n  [8,]  2.45151125  2.7340835  0.0184003167 -0.0176703869",
        "\n  [9,]  1.85142639  0.7574532  0.0163546173 -0.0336996588\n [10,]  1.48907385  1.0940192  0.0411820135 -0.0120638636\n [11,]  1.55164667  1.8187000  0.0145038700 -0.0301616276\n [12,]  2.22866622  1.3570308  0.0346940182 -0.0383236729\n [13,]  1.82914684  1.3957928  0.0070468244 -0.0368363733\n [14,]  1.94576462  1.6089091  0.0070469120  0.0177339869\n [15,]  1.76151565  0.6695465 -0.0003885912 -0.0506765050\n [16,]  0.95362986  1.9511123 -0.0169374269 -0.0071458138\n [17,]  1.55916065  0.4104573  0.0125838059 -0.0320367682",
        "\n [18,]  0.49503393  1.2619736 -0.0234305573 -0.0272898903\n [19,]  2.26151854  2.7700804 -0.0189910170 -0.0240110154\n [20,]  2.05122067  3.0935158  0.0206901661 -0.0221739080\n [21,]  0.64173034  1.0796719 -0.0446764483 -0.0225562947\n [22,]  2.25170034  2.3982707  0.0331457209 -0.0153673479\n [23,]  0.72678224  0.6417664  0.0047440218 -0.0170374167\n [24,]  1.76459731  1.7474317 -0.0134833003 -0.0170127294\n [25,]  1.44394812  1.6624608 -0.0059477203 -0.0457443767\n [26,]  1.51629949  1.5656245  0.0203829938 -0.0429476058",
        "\n [27,]  0.91984449  0.6687168 -0.0118235505 -0.0050589627\n [28,]  0.59622793  0.7457775 -0.0658856946 -0.0271149744\n [29,]  2.30053798  1.8635696  0.0173919672 -0.0323474815\n [30,]  1.22203982  0.5496417  0.0322438555 -0.0302350489\n [31,]  2.08027588  2.0358960  0.0168539629 -0.0101458060\n [32,]  1.80240877  1.7952323  0.0066500590 -0.0337883685\n [33,]  0.07851379  1.4375505 -0.0080094699 -0.0235268872\n [34,]  0.40970498  0.9103244 -0.0718305307  0.0036682430\n [35,]  0.55504735  0.9190100 -0.0680583157 -0.0008697518",
        "\n [36,]  2.13227831  1.9314819 -0.0009954928 -0.0205911306\n [37,]  2.33121964  2.5503145  0.0234721081 -0.0406174656\n [38,]  1.05500377  1.0108568  0.0242369259 -0.0490476424\n [39,]  1.00486383  1.3257360 -0.0169346864 -0.0153393893\n [40,]  1.18256738  0.8470049 -0.0002228713 -0.0377803170\n [41,]  2.29953004  2.5887711  0.0477040774 -0.0676659302\n [42,] -0.87963451 -0.1006573  0.0254255998 -0.0170458764\n [43,]  0.43604004  0.8290497 -0.0302623259 -0.0261398496\n [44,]  2.01834751  2.0975580 -0.0182223495 -0.0281827540",
        "\n [45,]  1.38484087  2.1356855 -0.0069113469 -0.0262318553\n [46,]  2.60509095  2.1330932  0.0258450949 -0.0290600147\n [47,]  1.45098016  1.7521097 -0.0310286385 -0.0250112593\n [48,]  2.21922221  2.0295963  0.0401106334 -0.0369842003\n [49,]  0.85342507  1.4637336 -0.0323969737 -0.0231154506\n [50,]  1.53531205  1.7098679 -0.1099505232 -0.0736002120\n [51,]  0.09888363  0.2687285  0.0416916034 -0.0425894708\n [52,]  1.41680081  0.7086300 -0.0030151759 -0.0441661624\n [53,]  0.31179158  0.1929309  0.0072258841 -0.0240782878",
        "\n [54,]  0.90099507  0.7335871  0.0485749100 -0.0418648349\n [55,]  1.96646343  1.0043224  0.0250538919 -0.0387653310\n [56,]  0.77207170  0.1088310 -0.0012158048 -0.0280996945\n [57,]  1.98329735  2.4433471  0.0061488618 -0.0165374478\n [58,]  1.87704192  2.7608724  0.0508890574 -0.0253529706\n [59,]  2.27415136  2.9443303 -0.0224194711 -0.0324479749\n [60,]  0.84817735  0.6199815  0.0316714690 -0.0188070241\n [61,]  0.65876237  1.0744518 -0.0182348090 -0.0294029680\n [62,]  1.91649995  2.7918970  0.0379068304 -0.0229815261",
        "\n [63,]  0.57698164  1.1843598  0.0072111715 -0.0371236221\n [64,]  0.88036938  1.1485967  0.0292025844 -0.0360593593\n [65,]  2.30947736  1.8778728  0.0089994032 -0.0327437432\n [66,]  1.85751529  1.6239671 -0.0038373375 -0.0465775681\n [67,]  1.52323856  1.2561391  0.0235646446 -0.0300548265\n [68,]  1.40716535  1.2224533  0.0099278818 -0.0111142321\n [69,]  1.58854910  0.2977181 -0.0041545758 -0.0412422342\n [70,]  0.94635979  1.1503233 -0.0061645860 -0.0279755402\n [71,]  1.31290086  0.2374314 -0.0356631769 -0.0295235734",
        "\n [72,]  1.92512440  2.0982230 -0.0256617092 -0.0180618250\n [73,]  1.47578586  1.8645534 -0.0116254150 -0.0316430108\n [74,]  1.22517631  1.3965911  0.0500361555 -0.0182576413\n [75,]  1.26488960  1.7606572  0.0327607111  0.0041187183\n [76,]  2.55787129  2.4339005  0.0697454966  0.0024144299\n [77,]  2.10514658  2.3839646  0.0172042975 -0.0326400838\n [78,]  0.89662786  0.2216813 -0.0017400284 -0.0308366158\n [79,]  0.48044692  0.1573783 -0.0343000917 -0.0259838681\n [80,]  2.47803941  2.8902403  0.0389961836 -0.0534361946",
        "\n [81,]  0.74728699  1.0880068 -0.0038245821 -0.0389404722\n [82,]  2.00141541  1.6643513 -0.0476306592 -0.0331348143\n [83,]  1.18876408  1.1892506  0.0140280330 -0.0228401538\n [84,]  1.37414577  0.8100173 -0.0525871259 -0.0168840421\n [85,]  2.42682686  2.3978732  0.0181925014 -0.0041561491\n [86,]  0.75147140  0.2851819  0.0242881279 -0.0230627052\n [87,]  1.08731996  0.5228227 -0.0183517857 -0.0228097450\n [88,]  0.88064198  0.2462450  0.0004299594  0.0190836157\n [89,]  1.15324819  1.2879755 -0.0220960842 -0.0391968970",
        "\n [90,]  2.18906837  2.9764848 -0.0304322332 -0.0334359224\n [91,]  0.80646333  1.4936363 -0.0417596950  0.0139198580\n [92,]  1.64160314  1.7418655  0.0115815952 -0.0456522590\n [93,]  1.37705171  0.9604019 -0.0078283097 -0.0176012318\n [94,]  0.93087589  1.1910356  0.0517558370 -0.0254904735\n [95,]  1.06208059  1.1565906 -0.0420893159 -0.0463625061\n [96,]  1.77880548  1.6408448  0.0032473858 -0.0449042137\n [97,]  1.54840710  1.1397278  0.0053044375 -0.0304188308\n [98,]  1.51659187  2.0216997  0.0005754796 -0.0074890174",
        "\n [99,]  1.95659165  1.5016575 -0.0120483292 -0.0470136650\n[100,]  0.25007908  0.6351432 -0.0154724905 -0.0235723210\n                [,5]       [,6]        [,7]          [,8]\n  [1,]  0.0449756718 0.04288713 0.017504920  0.0233969450\n  [2,]  0.0677663502 0.05295839 0.023147852  0.0341041596\n  [3,] -0.0024662981 0.04375158 0.025855366  0.0802471142\n  [4,]  0.0488251518 0.05413664 0.010697079  0.0114644190\n  [5,]  0.0184950458 0.04181620 0.019304659 -0.0175833218\n  [6,]  0.0942902941 0.02743778 0.017705050  0.0439391265",
        "\n  [7,]  0.0533463781 0.03631443 0.022936430  0.0257955486\n  [8,]  0.1252652606 0.04278987 0.011758343  0.0454820887\n  [9,]  0.0389865342 0.04344144 0.024783835  0.0725339274\n [10,]  0.0753670035 0.04047287 0.018582813  0.0119123708\n [11,]  0.0284561934 0.04386541 0.027661967  0.0800273544\n [12,]  0.1490644123 0.03832836 0.014330814  0.0240854833\n [13,]  0.1243262856 0.04917999 0.008854037  0.0546116282\n [14,] -0.0204143929 0.03211661 0.021132743 -0.0090139450\n [15,]  0.0282539022 0.05625680 0.019615223  0.1055985681",
        "\n [16,] -0.0535508366 0.03578832 0.026732263  0.0530360514\n [17,]  0.0418477793 0.05320275 0.025983662  0.0923179044\n [18,]  0.0193996276 0.06182546 0.019033169  0.0793347995\n [19,]  0.1482388643 0.05857711 0.019259759  0.0796799439\n [20,]  0.0839232109 0.04493686 0.027582687  0.0829802395\n [21,] -0.0124443090 0.04310812 0.015932725  0.0328090604\n [22,]  0.0599968137 0.03299575 0.019971479  0.0294247491\n [23,] -0.0377113921 0.03932898 0.023703873  0.0068517242\n [24,]  0.0937863481 0.04838766 0.020047790  0.0197111177",
        "\n [25,]  0.0957429502 0.04963033 0.020982371  0.0392622850\n [26,]  0.0018404374 0.04959781 0.027414634  0.1167350729\n [27,]  0.0120855933 0.03454621 0.026569157  0.0021098929\n [28,]  0.1038206372 0.05724218 0.023185757  0.0127050711\n [29,] -0.0256969165 0.03692938 0.012603132  0.0452488627\n [30,]  0.0206352260 0.05086337 0.022754315  0.0229610946\n [31,]  0.0253844811 0.04298497 0.023109160  0.1015370293\n [32,]  0.0097274661 0.04365492 0.020363892  0.0151937571\n [33,] -0.0833926286 0.03454902 0.017922550  0.0720830256",
        "\n [34,] -0.0579415250 0.03811180 0.021145092  0.0367489622\n [35,] -0.0610103789 0.04189589 0.030193422  0.0996881785\n [36,]  0.0009215207 0.03931989 0.017421193 -0.0030937941\n [37,]  0.0956403618 0.05388723 0.018539015  0.0527467972\n [38,] -0.0696523979 0.04690698 0.022367281  0.0455937717\n [39,]  0.1830911198 0.03949325 0.019206414  0.0846478546\n [40,]  0.0599575560 0.05602118 0.019643197  0.0295283048\n [41,]  0.0580566015 0.04256048 0.022603658  0.0806722307\n [42,]  0.1085484483 0.04855423 0.020103919  0.0093159397",
        "\n [43,]  0.0029724785 0.06085469 0.023878533  0.0940685696\n [44,]  0.0168632037 0.03774609 0.019853857  0.0197646506\n [45,]  0.1215167641 0.05057429 0.026261933  0.0176858460\n [46,]  0.0321702486 0.06378267 0.021350589  0.0330287798\n [47,]  0.0581215474 0.05055105 0.024136667  0.0113040784\n [48,]  0.1655240092 0.04472706 0.027289088  0.0674039850\n [49,]  0.1173424469 0.03401865 0.019279771 -0.0108152867\n [50,]  0.0549523643 0.05236814 0.016329374  0.0988643445\n [51,]  0.0732651754 0.05046999 0.019080228  0.0614241006",
        "\n [52,] -0.0423702523 0.04291673 0.014082682  0.0200774928\n [53,]  0.0754497011 0.05220119 0.017592074  0.0658770860\n [54,]  0.0270037488 0.03754483 0.020550933  0.0733121694\n [55,]  0.1257761654 0.05937838 0.019069773  0.0655754006\n [56,] -0.0470574793 0.04841545 0.015095507  0.0416822190\n [57,]  0.0652314699 0.04070543 0.021639665  0.0750195593\n [58,]  0.0353316810 0.04439947 0.022413504  0.0776971411\n [59,]  0.0223930984 0.05398249 0.020714585  0.0157509658\n [60,]  0.0762665691 0.04155092 0.017367952  0.0002497981",
        "\n [61,]  0.0306084182 0.04732822 0.023670559  0.0671581316\n [62,] -0.0243133371 0.04250467 0.022039453 -0.0150508329\n [63,] -0.0089945975 0.04726839 0.018454300  0.0643071986\n [64,] -0.0360469487 0.05062356 0.021175269 -0.0095721143\n [65,]  0.0925425212 0.04498251 0.020516658 -0.0017784719\n [66,]  0.0052088347 0.04890190 0.022284847 -0.0207905433\n [67,] -0.0015094408 0.06339172 0.021980981  0.0657495155\n [68,]  0.1838891514 0.03873876 0.026786584  0.0021228720\n [69,]  0.1481796111 0.04722642 0.019711465  0.0303277437",
        "\n [70,]  0.0454253922 0.03851739 0.013766224  0.0369938133\n [71,]  0.1310050053 0.05232373 0.023347795  0.0589657681\n [72,]  0.0208977067 0.05636372 0.020021000  0.0575930974\n [73,] -0.0146426585 0.03299267 0.026004082  0.0212939152\n [74,] -0.0990863034 0.05142994 0.021536288  0.0580424242\n [75,]  0.0628047784 0.04225645 0.012474729  0.0207829379\n [76,] -0.0025014513 0.05174913 0.013742695  0.0234861834\n [77,]  0.1098546441 0.04036071 0.023784355  0.0740064861\n [78,]  0.0702816780 0.04738645 0.022624073  0.0767248593",
        "\n [79,]  0.0568494464 0.05133010 0.023751355 -0.0340958107\n [80,]  0.1268588102 0.04362968 0.023161803  0.0603242076\n [81,]  0.0196580866 0.04937250 0.015157902  0.0561191339\n [82,] -0.0093660434 0.03707999 0.021645175  0.0288093074\n [83,] -0.0694823094 0.06173599 0.016457525  0.0588354942\n [84,]  0.0791961919 0.04508471 0.027943180  0.0285767597\n [85,] -0.0384623813 0.03910751 0.020527380  0.0573970662\n [86,]  0.1223726801 0.05415738 0.022425348  0.0805447491\n [87,] -0.0225779965 0.04155230 0.020354759  0.0643109371",
        "\n [88,]  0.1515499891 0.04278997 0.022561619  0.0332353804\n [89,] -0.0686617940 0.04687542 0.021999575  0.0123768449\n [90,]  0.1342392109 0.04117993 0.018685109  0.0015331403\n [91,] -0.0147894349 0.04270181 0.020020820  0.0225267763\n [92,]  0.0677382094 0.04393947 0.021802438  0.0597478730\n [93,]  0.0609106591 0.06462658 0.024280032  0.0708127395\n [94,]  0.0582084903 0.04165563 0.020921354  0.0530072647\n [95,]  0.0285467393 0.04783553 0.017864122  0.0116838672\n [96,]  0.0751514818 0.04291811 0.019947200 -0.0030598221",
        "\n [97,]  0.0111932366 0.05218680 0.022169786  0.0655167949\n [98,]  0.1371388763 0.04407545 0.019721587  0.0739374356\n [99,] -0.0534862677 0.05317740 0.019190931  0.0150445781\n[100,]  0.1730990885 0.03891201 0.017459512  0.0546832285\n                [,9]      [,10]\n  [1,] -0.0203407892 0.05987985\n  [2,] -0.0733013293 0.05709388\n  [3,] -0.0330932311 0.05315851\n  [4,] -0.0724093324 0.04902302\n  [5,] -0.0955979982 0.04577948\n  [6,]  0.0077532417 0.05523692\n  [7,] -0.0205837383 0.05350777\n  [8,] -0.0658988325 0.04840043",
        "\n  [9,] -0.1064434633 0.05636317\n [10,] -0.1816640982 0.05283229\n [11,] -0.1079565604 0.05076263\n [12,] -0.1227135606 0.04770573\n [13,] -0.0843785738 0.05012853\n [14,]  0.0059210963 0.05057133\n [15,] -0.0507362094 0.05544770\n [16,] -0.1038222015 0.04939793\n [17,] -0.0833922194 0.05248268\n [18,] -0.0584908898 0.05455156\n [19,]  0.0612920716 0.05626501\n [20,]  0.0095963714 0.05278866\n [21,] -0.0281039183 0.05431159\n [22,] -0.0051623712 0.04818019\n [23,] -0.0549013964 0.05331907\n [24,]  0.0170411740 0.05951399",
        "\n [25,] -0.0793360089 0.05920845\n [26,]  0.0350503570 0.04789690\n [27,]  0.0193316303 0.04798517\n [28,] -0.0107151251 0.05293394\n [29,] -0.0996014161 0.04976405\n [30,] -0.0524383876 0.05123289\n [31,]  0.0821426645 0.05808828\n [32,] -0.0405886423 0.05113080\n [33,] -0.0287570173 0.05497349\n [34,] -0.0868251910 0.04553073\n [35,] -0.0809439257 0.05567168\n [36,] -0.0245492318 0.05512587\n [37,] -0.0252192052 0.04978625\n [38,] -0.0406830703 0.06029896\n [39,]  0.0005910711 0.05950516\n [40,] -0.0596634932 0.04906250",
        "\n [41,]  0.0750763848 0.05390358\n [42,] -0.0306986653 0.05391708\n [43,]  0.0241071658 0.05015327\n [44,]  0.0595263103 0.05552755\n [45,]  0.1027803740 0.05557086\n [46,] -0.0441290528 0.04912937\n [47,] -0.0205458810 0.04941593\n [48,] -0.0002366080 0.05648421\n [49,] -0.0214876148 0.05656033\n [50,] -0.0467486240 0.05613508\n [51,]  0.0103948090 0.05303713\n [52,]  0.0525517500 0.05275694\n [53,]  0.0614557364 0.05394341\n [54,] -0.1453405736 0.05270263\n [55,]  0.0392127620 0.04811066\n [56,] -0.1096398979 0.05708739",
        "\n [57,] -0.0322601797 0.05373398\n [58,] -0.0691924732 0.05575298\n [59,] -0.0693495774 0.05375904\n [60,] -0.0055410682 0.05806045\n [61,] -0.0301776307 0.05156867\n [62,] -0.0251685798 0.05614100\n [63,]  0.0250041597 0.05694293\n [64,]  0.0128953438 0.05226616\n [65,] -0.0784150807 0.05809527\n [66,]  0.0649710144 0.05920440\n [67,] -0.0283689896 0.05339648\n [68,] -0.1303369734 0.05076463\n [69,] -0.0355153258 0.05492814\n [70,] -0.0778295184 0.05100039\n [71,] -0.0433906377 0.05085446\n [72,] -0.0026953274 0.05294538",
        "\n [73,] -0.1001282093 0.05151392\n [74,] -0.0136184622 0.05766811\n [75,]  0.1100692910 0.04659949\n [76,] -0.0156696329 0.05181152\n [77,] -0.0129544359 0.04386991\n [78,] -0.0896269543 0.05065899\n [79,]  0.0106521843 0.05685344\n [80,]  0.1305834096 0.05219460\n [81,] -0.0280022908 0.05613410\n [82,]  0.0115132496 0.05384450\n [83,] -0.0626590456 0.05348597\n [84,] -0.0665501050 0.05231125\n [85,] -0.0383788304 0.05272795\n [86,] -0.0729000860 0.05685665\n [87,]  0.0774086496 0.05299664\n [88,] -0.0245539842 0.04690346",
        "\n [89,] -0.0735329902 0.05665603\n [90,] -0.0514819434 0.05030745\n [91,] -0.0075131492 0.05503133\n [92,]  0.0087495103 0.04947246\n [93,] -0.0448458684 0.05364894\n [94,] -0.0488652391 0.05779385\n [95,] -0.0824683155 0.05434995\n [96,]  0.0276734064 0.05384310\n [97,] -0.0069123897 0.05520787\n [98,]  0.0570147058 0.05732702\n [99,] -0.0755481366 0.05614120\n[100,]  0.0298122700 0.05736796\n",
        "> ",
        "(predsList[[j]] - y[fold, ])^2",
        "               [,1]         [,2]         [,3]         [,4]\n  [1,] 6.044926e-03 1.108006e+00 2.337780e+00 1.011526e+00\n  [2,] 3.362797e-01 4.479954e+00 7.103967e-03 3.448347e-01\n  [3,] 4.414539e+00 7.855682e-03 4.743440e-04 1.825273e+00\n  [4,] 2.266844e+00 2.910323e+00 2.344949e+00 1.219392e-02\n  [5,] 1.078236e+00 7.582081e-02 2.848768e+00 3.741279e-02\n  [6,] 1.757667e+00 7.982201e-01 2.286862e+00 7.557595e+00\n  [7,] 4.619663e-01 4.218216e+00 7.448779e-01 2.743847e-01\n  [8,] 8.779868e+00 6.044198e+00 3.504452e+00",
        " 1.364128e+00\n  [9,] 1.871874e+00 6.468566e+00 2.539707e-01 3.111738e-01\n [10,] 2.842586e+00 5.709363e-01 3.409025e-02 1.075205e+00\n [11,] 3.193490e-01 4.022011e+00 3.577010e-02 1.369074e-02\n [12,] 5.002551e-02 2.872681e-01 1.029897e-02 4.537620e-03\n [13,] 1.213887e-02 4.031163e-02 9.246991e-01 2.904348e+00\n [14,] 1.048320e+01 9.787058e+00 2.093618e-05 6.311646e-01\n [15,] 1.542040e-01 1.864079e+00 4.824058e-02 1.851871e+00\n [16,] 2.796991e+00 1.663689e+00 7.402444e-02 1.318783e-01\n [17,] 3.222081e+00 4.525618e+00",
        " 2.380717e+00 2.001621e+00\n [18,] 3.157325e+00 1.669543e-03 2.956879e-02 2.793904e+00\n [19,] 2.547441e-02 3.244817e+00 5.615365e-01 5.744491e-02\n [20,] 9.117744e-01 2.513116e-01 4.425880e-01 1.998826e+00\n [21,] 3.456148e-01 1.198482e-01 1.242373e-01 1.488389e+00\n [22,] 5.117598e+00 1.083827e+01 9.815101e-01 2.427606e+00\n [23,] 3.183661e-01 5.903118e-05 7.135916e-04 4.170529e+00\n [24,] 9.102865e-03 2.452401e-01 2.149085e+00 2.338778e+00\n [25,] 1.575496e-02 1.033597e+00 6.295078e-02 1.139456e-03\n [26,] 4.718963e-01",
        " 4.095102e-01 1.648688e-01 1.542911e+00\n [27,] 1.183910e+00 2.558308e+00 5.347983e-01 1.497865e-04\n [28,] 8.356261e-02 4.416175e+00 5.514151e-02 1.247881e+00\n [29,] 3.910573e-01 1.606437e-02 4.315980e-01 2.956146e-01\n [30,] 3.586040e+00 2.624702e-01 2.389278e-01 7.624182e-02\n [31,] 7.427665e+00 1.246630e+00 6.658242e+00 3.238747e-01\n [32,] 2.344577e+00 4.552397e-01 3.835765e-01 4.147439e-02\n [33,] 2.304789e-01 1.727058e+00 3.221714e-01 9.178312e-01\n [34,] 2.158016e+00 8.413443e-01 3.813915e+00 1.567079e-04\n [35,]",
        " 6.967149e+00 2.531448e+00 1.304336e+00 6.047736e-01\n [36,] 4.843540e-01 1.648106e-02 3.226187e-02 3.426200e-01\n [37,] 1.562629e+00 5.801614e-01 5.416306e-02 5.025032e-01\n [38,] 2.134066e+00 5.999618e+00 2.237919e+00 1.165600e-02\n [39,] 7.191228e+00 1.679265e+01 7.874755e-01 7.148762e+00\n [40,] 1.906393e+00 3.460623e-01 4.204578e-01 3.023613e-01\n [41,] 1.207161e-02 4.083657e+00 5.214430e-02 9.721950e-01\n [42,] 2.957755e-01 4.972572e-01 1.576415e+00 3.588577e-01\n [43,] 1.680105e-01 4.917204e-02 4.966624e-01 8.869819e-01",
        "\n [44,] 1.049998e+01 1.597974e+00 9.456707e-01 1.824233e-01\n [45,] 5.717651e+00 1.358590e+00 4.195995e+00 1.069805e+00\n [46,] 2.797980e+00 2.396424e+00 4.817393e-01 7.707760e-02\n [47,] 1.545833e-01 1.406238e+00 1.056152e+00 8.597131e-02\n [48,] 6.292595e+00 6.678085e+00 1.955522e-02 5.853617e-02\n [49,] 4.699215e-01 4.660783e+00 5.642744e-01 4.279200e-04\n [50,] 1.736668e-01 1.858692e-01 4.146052e+00 1.049059e-02\n [51,] 1.693630e+00 1.279358e-01 2.033539e+00 1.673021e-01\n [52,] 3.384662e+00 1.302349e-01 8.797447e-03",
        " 2.454904e-01\n [53,] 2.451642e+00 1.462558e+00 1.154764e+00 7.142869e-03\n [54,] 8.559894e+00 6.987764e-01 1.252791e+00 7.316063e+00\n [55,] 3.510585e+00 3.452997e+00 6.566188e-01 8.963499e-01\n [56,] 7.440409e-02 5.216753e-01 2.990686e-07 1.725486e-01\n [57,] 3.908259e+00 1.999494e+00 1.461983e+00 2.982677e-03\n [58,] 1.523505e-01 3.871437e-01 5.150035e-01 3.503675e-01\n [59,] 1.432636e-01 5.370140e-03 5.649691e-03 1.578985e-01\n [60,] 3.731401e-01 4.646864e-02 1.163590e+00 7.018449e-01\n [61,] 4.460419e+00 3.189666e+00",
        " 8.504119e-01 3.487383e-02\n [62,] 1.212275e+01 1.162131e-01 9.049461e-03 2.200658e+00\n [63,] 1.190543e-02 1.139404e+00 8.647424e-02 1.665198e-01\n [64,] 9.296972e-01 8.980608e-01 1.435513e-01 9.326370e-01\n [65,] 1.307159e-01 5.168003e+00 1.460138e-01 1.584513e+00\n [66,] 2.201096e-02 7.097795e-01 8.373207e-01 1.016675e+00\n [67,] 6.932641e-01 2.527351e-03 1.668064e+00 4.769244e-02\n [68,] 7.777690e-02 2.352012e-04 3.516715e-01 4.025302e+00\n [69,] 1.422429e+00 1.892447e-02 5.755743e-01 9.079805e-01\n [70,] 7.888839e-01",
        " 1.519034e+00 4.440038e-01 4.176215e-02\n [71,] 9.926642e-01 1.059963e-01 3.446205e+00 8.396857e-01\n [72,] 6.080477e+00 2.349356e+00 3.944126e+00 2.585795e-01\n [73,] 4.465444e+00 1.877000e-01 8.205191e-01 4.345133e-02\n [74,] 3.644665e+00 1.272308e+01 6.838570e-01 1.026407e-01\n [75,] 2.752223e+00 2.589450e-01 9.213156e-02 2.320515e+00\n [76,] 7.903689e+00 2.303187e+00 1.458835e+00 7.887404e-02\n [77,] 1.365652e+00 8.540859e+00 7.946652e-02 1.060079e+00\n [78,] 1.136541e+00 8.888621e+00 2.610251e+00 6.254222e-02\n [79,]",
        " 5.863254e-01 7.131251e-01 1.249526e-01 5.849206e-02\n [80,] 4.103748e-01 4.798319e-02 3.635000e+00 2.138090e+00\n [81,] 8.274202e-03 7.013666e-01 5.481380e-02 1.310202e-01\n [82,] 5.721903e+00 9.326179e-01 4.525968e-01 1.184164e+00\n [83,] 1.241778e+01 2.353228e+00 4.585567e-04 2.461585e-01\n [84,] 4.273093e+00 1.016225e-01 8.490740e-02 8.522732e-01\n [85,] 3.064416e+00 4.366675e+00 8.970765e-04 4.796943e+00\n [86,] 2.253923e+00 5.568615e-01 1.108215e+00 2.723213e-03\n [87,] 5.798888e-01 9.860862e-01 3.304215e+00 3.587502e-03",
        "\n [88,] 7.703083e-01 1.467576e+01 5.538142e-02 3.383731e-01\n [89,] 1.538515e+01 4.992083e+00 3.507626e-02 2.474574e+00\n [90,] 1.149032e-01 3.216118e-03 8.702044e-02 1.383649e-01\n [91,] 1.470440e-01 1.136356e-02 2.953613e-01 3.934633e-01\n [92,] 1.241855e+00 6.518948e-01 1.433671e+00 1.602521e+00\n [93,] 1.980460e-01 1.574365e+00 1.664071e+00 9.334941e-01\n [94,] 7.487708e+00 1.852778e-01 6.164253e-02 6.683060e-02\n [95,] 1.119938e+00 4.353065e+00 1.186962e+00 2.560614e-02\n [96,] 3.281125e-01 1.177283e+00 1.224589e+00",
        " 1.293416e-02\n [97,] 1.031374e+01 4.373076e+00 1.121027e-02 1.511445e-05\n [98,] 7.885423e-04 6.414905e-03 1.074336e+00 1.729287e-01\n [99,] 2.865763e-02 6.601598e-04 2.117598e+00 3.273695e-01\n[100,] 9.993961e-01 1.303895e-04 1.547001e+00 2.817309e-02\n               [,5]         [,6]         [,7]         [,8]        [,9]\n  [1,] 2.226099e-01 1.202974e+00 3.087781e-01 7.320958e-01 0.222660110\n  [2,] 3.285298e-02 3.581821e-01 5.258482e-01 2.177753e+00 0.167193526\n  [3,] 1.263015e+00 1.682871e-01 9.626163e-01 3.272462e+00",
        " 0.027100011\n  [4,] 9.266330e-01 1.388919e-01 2.597078e-02 5.345354e-01 0.100467741\n  [5,] 7.043693e-01 2.721178e-03 6.103144e-02 1.542892e-01 1.294466473\n  [6,] 4.721082e+00 2.906216e-01 1.088076e-01 3.089266e-01 1.912848957\n  [7,] 9.913232e-02 1.469117e+00 2.050167e-01 8.005257e-01 0.151079672\n  [8,] 3.168061e+00 1.361652e-04 2.251907e+00 3.697009e+00 2.798567267\n  [9,] 3.846357e-02 3.030653e-02 2.446391e-01 1.767450e+00 0.015690895\n [10,] 1.737071e-02 3.531348e-01 3.601898e-01 1.462763e+00 0.815907402\n [11,]",
        " 2.187542e-02 5.429714e-02 2.435648e-01 5.901393e-02 0.149628126\n [12,] 1.471532e+00 1.066991e-02 1.063980e+00 3.466097e-01 0.342023264\n [13,] 1.271393e-01 5.217591e-01 1.097668e-01 3.316157e-02 0.018461117\n [14,] 1.359176e-01 4.298156e+00 6.014167e-02 3.118747e-01 0.162219673\n [15,] 2.828973e+00 2.692515e+00 7.713211e-01 4.053179e-02 1.429979943\n [16,] 2.763591e-01 3.952123e-01 1.321497e-01 2.063192e-03 0.253612107\n [17,] 4.305600e-03 6.737632e-01 4.238256e-01 2.678039e-02 0.680948601\n [18,] 2.079464e+00 4.820300e+00",
        " 1.153891e-01 4.368064e-01 0.812959128\n [19,] 2.129314e-03 6.793142e-01 3.909681e-02 2.588811e-01 0.309127959\n [20,] 2.014515e+00 4.241138e-01 1.423823e+00 1.082188e+00 2.288448939\n [21,] 8.422810e+00 1.825732e-01 1.373580e-01 8.752153e-01 2.348970071\n [22,] 1.211156e+00 6.649343e-01 3.272576e-01 3.030282e-01 0.012809727\n [23,] 2.809845e-01 2.593678e+00 6.696470e-01 4.311884e-01 4.559029106\n [24,] 1.936211e-02 2.026887e+00 9.470963e-01 3.107670e+00 2.067690742\n [25,] 4.732293e-01 6.967896e-02 3.759174e-02 4.159914e-01",
        " 0.149818959\n [26,] 1.724436e-05 1.035820e+00 8.515337e-03 5.758037e-02 0.386482350\n [27,] 1.344494e-01 1.976958e-01 4.672521e-01 4.740547e-01 1.610451875\n [28,] 9.561933e-01 5.784445e-01 4.939750e-01 1.488988e+00 0.032979436\n [29,] 2.531147e-01 1.936645e+00 1.474462e-01 1.662488e+00 0.108807483\n [30,] 6.156409e-01 1.162249e+00 2.919148e-01 1.503166e+00 1.369741583\n [31,] 3.109033e+00 1.607214e-01 1.148239e-01 8.776667e-01 1.637386805\n [32,] 6.899788e-02 1.836999e+00 3.347965e-01 1.085890e-03 0.364257477\n [33,]",
        " 2.157885e-01 1.498842e+00 1.859533e-01 1.741877e+00 0.760600099\n [34,] 1.895487e+00 5.314625e-01 2.574755e+00 6.798163e-01 0.457103772\n [35,] 3.915721e-01 9.080027e-01 1.440420e+00 4.658851e-02 0.772360157\n [36,] 1.107388e+00 1.113024e-02 1.953114e-01 6.574108e-01 0.065676307\n [37,] 3.895152e-01 5.103498e-01 6.026316e-01 5.554927e-02 1.809552255\n [38,] 1.418622e+00 1.829287e+00 1.320772e-04 4.115491e-01 0.052343880\n [39,] 1.664977e-01 6.283335e-02 1.099585e-01 7.113503e+00 1.923406455\n [40,] 5.125291e-01 4.956256e+00",
        " 1.288738e+00 1.547175e+00 0.020277771\n [41,] 4.730350e-03 6.574363e-02 1.176982e-01 3.743806e-01 0.541706288\n [42,] 1.185760e-03 3.515742e-03 2.693783e-02 1.467324e-02 0.044841640\n [43,] 7.469130e-01 6.104551e-01 3.446334e-02 7.861274e-02 0.789887753\n [44,] 3.334120e-02 5.174035e-02 1.261352e+00 1.853267e-04 4.687698826\n [45,] 1.356150e+00 4.943006e+00 2.804326e-01 1.232664e-03 0.366571223\n [46,] 3.999749e-01 1.015183e-02 6.294589e-01 1.382372e+00 0.834083933\n [47,] 3.245776e+00 5.722360e-01 4.433725e-01 4.981200e+00",
        " 0.079919149\n [48,] 1.103715e-01 3.691607e-02 4.938879e-05 7.522428e-02 3.694985274\n [49,] 1.972705e-01 2.273846e+00 1.674444e-01 2.382553e+00 1.540952594\n [50,] 1.555905e+00 1.207646e+00 1.271066e-02 1.972291e+00 4.883009511\n [51,] 5.583495e-01 3.228230e+00 7.956045e-02 8.105003e-01 0.570735845\n [52,] 4.632564e-03 2.735642e+00 1.254474e+00 2.946919e-01 0.988717313\n [53,] 3.127502e+00 2.847853e-01 8.293153e-03 1.450246e+00 0.560962492\n [54,] 4.630505e-03 4.533019e-01 4.137988e-01 9.707338e-01 0.020493801\n [55,]",
        " 1.273386e-01 1.255656e+00 2.992440e-01 1.460182e-01 0.081820678\n [56,] 2.620188e-01 6.572766e-01 9.970579e-01 2.794635e+00 1.276916164\n [57,] 6.392353e+00 1.812455e-01 3.691047e+00 6.450968e-01 0.187438502\n [58,] 5.438446e+00 7.090531e+00 1.755169e+00 6.324503e-01 0.717737918\n [59,] 1.277547e-01 1.408383e+00 6.023589e+00 2.782417e-01 0.106033963\n [60,] 1.671224e+00 2.014114e-01 3.873693e-02 1.139549e-01 0.313015843\n [61,] 1.452807e-01 2.684969e+00 9.348812e-01 2.189961e+00 0.322007485\n [62,] 6.782019e+00 4.048591e+00",
        " 1.233943e+00 3.947597e-01 0.116167880\n [63,] 3.511005e+00 1.053138e+00 1.483238e+00 1.938954e-01 2.561950390\n [64,] 2.939455e+00 1.678957e+00 2.295247e-01 5.519004e-01 0.041024961\n [65,] 3.372844e-01 6.908857e-01 3.112063e+00 6.392356e-02 0.295076858\n [66,] 2.043323e-04 9.039249e-01 5.959362e-01 1.669415e-01 0.300824293\n [67,] 3.951514e+00 7.290596e-01 4.847940e-01 3.502067e-01 0.354757087\n [68,] 1.333766e-02 1.237756e+00 1.592825e+00 7.177387e-01 0.365393026\n [69,] 8.406639e-01 3.795769e+00 9.638379e-01 7.502712e-01",
        " 1.034664606\n [70,] 2.459724e-01 6.611258e-01 2.132810e+00 7.132951e-02 0.501867534\n [71,] 3.970568e-02 3.444475e+00 3.465694e-02 2.948846e+00 0.609476477\n [72,] 1.239313e+00 1.308076e+00 2.435338e-05 7.475231e+00 0.097132699\n [73,] 2.237578e-01 5.621482e-01 5.167614e-02 1.565623e+00 1.272425612\n [74,] 1.031579e-02 1.799929e-01 2.634626e-01 4.866799e-05 1.676287124\n [75,] 3.675196e-01 8.351711e+00 1.985332e+00 9.687176e-01 0.129661214\n [76,] 3.470116e-02 5.097488e-02 1.138759e+00 1.306448e+00 0.682347856\n [77,]",
        " 9.624155e-01 1.655642e+00 1.137167e-01 1.970772e+00 0.013321085\n [78,] 1.564236e-01 7.866521e+00 2.689539e-01 1.107439e-01 0.044919961\n [79,] 1.012937e-01 2.183469e+00 6.199380e-02 5.167230e+00 1.164839415\n [80,] 8.236693e-01 3.005295e-02 3.202466e+00 6.568507e-02 1.909300457\n [81,] 2.943809e+00 1.880524e+00 7.026200e-01 3.320082e-01 0.017656606\n [82,] 3.157607e-01 6.334685e-02 1.921015e+00 3.887737e+00 0.514673787\n [83,] 1.259588e-01 4.707809e-02 3.909211e-01 3.486094e+00 0.005121514\n [84,] 8.636456e-01 4.969690e-02",
        " 2.990236e-01 5.561185e-04 0.316572780\n [85,] 7.600192e-01 1.239853e+00 2.363365e-04 3.168512e-03 0.101059266\n [86,] 6.542953e-01 3.815231e+00 1.792227e+00 1.315977e+00 0.235083649\n [87,] 2.421413e+00 3.797938e-01 5.948226e-01 4.957103e-02 2.509022784\n [88,] 6.498213e-01 6.901141e-04 7.342298e-01 1.927133e-02 0.014097123\n [89,] 5.885582e-01 4.004523e-01 3.415192e-01 4.636407e-01 0.125627234\n [90,] 1.131015e+00 2.807072e-01 3.084367e-01 1.347959e+00 2.313866990\n [91,] 6.238308e-02 2.206290e-01 3.039857e+00 3.637384e-03",
        " 0.086532693\n [92,] 2.731128e+00 4.324524e-01 2.119068e+00 1.074562e+00 0.025740299\n [93,] 5.020814e-02 7.519882e-02 1.601967e+00 1.450676e-01 0.002940725\n [94,] 7.044536e-03 3.177828e-01 2.879025e-01 6.045196e-01 0.277798316\n [95,] 3.269077e-02 1.019603e-01 1.471843e-02 2.712727e+00 3.590520839\n [96,] 3.482924e-02 1.359630e+00 2.959768e-01 1.041939e+00 0.711446038\n [97,] 1.184756e+00 3.229397e-01 3.388590e-02 2.553684e-01 0.001141843\n [98,] 2.887944e-01 2.441183e+00 4.306353e-01 1.398996e-01 0.008157372\n [99,]",
        " 7.243835e-02 7.835629e-02 2.573044e+00 9.903868e+00 0.057870621\n[100,] 2.583611e+00 3.603125e-11 4.796954e+00 4.854014e-02 0.164765920\n              [,10]\n  [1,] 1.342249e-01\n  [2,] 1.487268e+00\n  [3,] 1.968274e+00\n  [4,] 3.176013e-01\n  [5,] 1.136645e+00\n  [6,] 1.742325e+00\n  [7,] 7.261598e-01\n  [8,] 1.152133e-01\n  [9,] 4.569445e+00\n [10,] 4.717266e-01\n [11,] 1.041483e-01\n [12,] 9.732665e-02\n [13,] 9.422851e-01\n [14,] 1.771194e-01\n [15,] 8.379726e-01\n [16,] 1.305941e+00\n [17,] 1.133424e+00\n [18,] 2.327642e+00",
        "\n [19,] 8.510610e-01\n [20,] 5.092752e-01\n [21,] 1.185291e+00\n [22,] 1.969156e-01\n [23,] 2.393984e-02\n [24,] 2.865154e-01\n [25,] 9.516418e-03\n [26,] 4.349739e-01\n [27,] 1.894773e+00\n [28,] 2.517887e-01\n [29,] 1.966959e+00\n [30,] 2.149754e-03\n [31,] 5.436671e-01\n [32,] 4.473352e-04\n [33,] 2.268446e-01\n [34,] 5.456614e-02\n [35,] 4.365742e-01\n [36,] 4.619592e+00\n [37,] 2.024412e-03\n [38,] 2.803908e-01\n [39,] 5.804409e-02\n [40,] 2.197027e-01\n [41,] 3.128917e-01\n [42,] 1.125357e+00\n [43,] 7.464978e-01\n [44,] 1.045182e+01",
        "\n [45,] 5.777733e-02\n [46,] 7.144930e-01\n [47,] 7.134786e-03\n [48,] 1.218543e+00\n [49,] 1.065912e+00\n [50,] 8.484148e-02\n [51,] 5.526368e+00\n [52,] 1.548416e-02\n [53,] 5.975740e-01\n [54,] 6.774473e-01\n [55,] 1.622463e-01\n [56,] 1.113492e-01\n [57,] 1.091869e+00\n [58,] 5.094393e-02\n [59,] 2.386047e-01\n [60,] 1.161650e+00\n [61,] 3.113399e+00\n [62,] 1.724960e+00\n [63,] 3.811550e+00\n [64,] 2.218168e-02\n [65,] 3.412290e-01\n [66,] 8.937249e-01\n [67,] 2.941657e-01\n [68,] 3.188985e+00\n [69,] 6.642429e-01\n [70,] 2.758987e-01",
        "\n [71,] 2.968690e-01\n [72,] 2.382331e-01\n [73,] 6.687160e-04\n [74,] 1.435246e-01\n [75,] 3.808626e+00\n [76,] 5.813099e-01\n [77,] 3.236852e+00\n [78,] 3.976144e+00\n [79,] 1.766234e+00\n [80,] 3.269363e-01\n [81,] 5.375607e-01\n [82,] 3.453079e-02\n [83,] 1.733467e+00\n [84,] 1.242707e-01\n [85,] 1.500079e+00\n [86,] 3.202395e-01\n [87,] 1.357165e+00\n [88,] 7.841525e-01\n [89,] 5.557056e-02\n [90,] 1.598519e-01\n [91,] 2.667304e-01\n [92,] 3.088027e-02\n [93,] 5.425288e-01\n [94,] 1.477862e-01\n [95,] 7.267231e-01\n [96,] 6.937607e+00",
        "\n [97,] 5.789438e-02\n [98,] 2.999315e-03\n [99,] 1.582288e+00\n[100,] 1.211153e+00\n",
        "> ",
        "ps0 <- PS[!fold, 1]",
        "> ",
        "fit0 <- lm(y[!fold, 1] ~ ps0)",
        "> ",
        "pred0 <- predict(fit0, newdata = data.frame(ps0 = PS[fold, 1]))",
        "> ",
        "plot(preds[,1]); points(pred0, col = 3); points(y[fold, 1], col = 2) #",
        "Error in plot(preds[, 1]) : object 'preds' not found\n",
        "> ",
        "plot(predsList[[j]][,1]); points(pred0, col = 3); points(y[fold, 1], col = 2) #",
        "> ",
        "mean((predsList[[j]] - y[fold, l])^2)",
        "Error in mean((predsList[[j]] - y[fold, l])^2) : object 'l' not found\n",
        "> ",
        "mean((predsList[[j]] - y[fold, 1])^2)",
        "[1] 5.222809\n",
        "> ",
        "mean((pred0 - y[fold, 1])^2)",
        "[1] 2.561508\n",
        "> ",
        "mean(predsList[[j]]); mean(pred0); mean(y[fold, 1])",
        "[1] 0.2983973\n[1] 1.415951\n[1] 1.731706\n",
        "> ",
        "mean((predsList[[j]][,1] - y[fold, 1])^2); mean((pred0 - y[fold, 1])^2)",
        "[1] 2.561648\n[1] 2.561508\n",
        "> ",
        "mean(predsList[[j]][,1]); mean(pred0); mean(y[fold, 1])",
        "[1] 1.415778\n[1] 1.415951\n[1] 1.731706\n",
        "> ",
        "j",
        "[1] 1\n",
        "> ",
        "A <- edgwas.object$A",
        "> ",
        "A[[j]]",
        "      [,1] [,2] [,3] [,4] [,5] [,6] [,7] [,8] [,9] [,10]\n [1,]    0    1    1    1    1    1    1    1    1     1\n [2,]    0    0    0    1    1    1    1    1    1     1\n [3,]    0    0    0    1    1    1    1    1    1     1\n [4,]    0    0    0    0    1    1    1    1    1     1\n [5,]    0    0    0    0    0    1    1    1    1     0\n [6,]    0    0    0    0    0    0    1    1    1     1\n [7,]    0    0    0    0    0    0    0    1    1     1\n [8,]    0    0    0    0    0    0    0    0    1     1",
        "\n [9,]    0    0    0    0    0    0    0    0    0     1\n[10,]    0    0    0    0    0    0    0    0    0     0\n",
        "> ",
        "j=10",
        "> ",
        "A[[j]]",
        "      [,1] [,2] [,3] [,4] [,5] [,6] [,7] [,8] [,9] [,10]\n [1,]    0    1    0    0    0    0    0    0    0     0\n [2,]    0    0    0    0    0    0    0    0    0     0\n [3,]    0    0    0    0    0    0    0    0    0     0\n [4,]    0    0    0    0    0    0    0    0    0     0\n [5,]    0    0    0    0    0    0    0    0    0     0\n [6,]    0    0    0    0    0    0    0    0    0     0\n [7,]    0    0    0    0    0    0    0    0    0     0\n [8,]    0    0    0    0    0    0    0    0    0     0",
        "\n [9,]    0    0    0    0    0    0    0    0    0     0\n[10,]    0    0    0    0    0    0    0    0    0     0\n",
        "> ",
        "plot(predsList[[j]][,1]); points(pred0, col = 3); points(y[fold, 1], col = 2) #",
        "> ",
        "mean((predsList[[j]][,1] - y[fold, 1])^2); mean((pred0 - y[fold, 1])^2)",
        "[1] 2.592952\n[1] 2.561508\n",
        "> ",
        "mean(predsList[[j]][,1]); mean(pred0); mean(y[fold, 1])",
        "[1] 1.386882\n[1] 1.415951\n[1] 1.731706\n",
        "> ",
        "sd(predsList[[j]][,1]); sd(pred0); sd(y[fold, 1])",
        "[1] 0.6018522\n[1] 0.6859677\n[1] 1.732156\n",
        "> ",
        "l=10",
        "> ",
        "ps0 <- PS[!fold, l]",
        "> ",
        "fit0 <- lm(y[!fold, l] ~ ps0)",
        "> ",
        "pred0 <- predict(fit0, newdata = data.frame(ps0 = PS[fold, l]))",
        "> ",
        "plot(predsList[[j]][,l]); points(pred0, col = 3); points(y[fold, l], col = 2) #",
        "> ",
        "j",
        "[1] 10\n",
        "> ",
        "A[[j]]",
        "      [,1] [,2] [,3] [,4] [,5] [,6] [,7] [,8] [,9] [,10]\n [1,]    0    1    0    0    0    0    0    0    0     0\n [2,]    0    0    0    0    0    0    0    0    0     0\n [3,]    0    0    0    0    0    0    0    0    0     0\n [4,]    0    0    0    0    0    0    0    0    0     0\n [5,]    0    0    0    0    0    0    0    0    0     0\n [6,]    0    0    0    0    0    0    0    0    0     0\n [7,]    0    0    0    0    0    0    0    0    0     0\n [8,]    0    0    0    0    0    0    0    0    0     0",
        "\n [9,]    0    0    0    0    0    0    0    0    0     0\n[10,]    0    0    0    0    0    0    0    0    0     0\n",
        "> ",
        "mean((predsList[[j]][,l] - y[fold, l])^2); mean((pred0 - y[fold, l])^2)",
        "[1] 1.059037\n[1] 1.059037\n",
        "> ",
        "A[[15]]",
        "      [,1] [,2] [,3] [,4] [,5] [,6] [,7] [,8] [,9] [,10]\n [1,]    0    1    0    0    0    0    0    0    0     0\n [2,]    0    0    0    0    0    0    0    0    0     0\n [3,]    0    0    0    0    0    0    0    0    0     0\n [4,]    0    0    0    0    0    0    0    0    0     0\n [5,]    0    0    0    0    0    0    0    0    0     0\n [6,]    0    0    0    0    0    0    0    0    0     0\n [7,]    0    0    0    0    0    0    0    0    0     0\n [8,]    0    0    0    0    0    0    0    0    0     0",
        "\n [9,]    0    0    0    0    0    0    0    0    0     0\n[10,]    0    0    0    0    0    0    0    0    0     0\n",
        "> ",
        "mean(predsList[[j]][,l]); mean(pred0); mean(y[fold, l])",
        "[1] 0.05323395\n[1] 0.05323395\n[1] -0.07715984\n",
        "> ",
        "sd(predsList[[j]][,l]); sd(pred0); sd(y[fold, l])",
        "[1] 0.001044997\n[1] 0.001044997\n[1] 1.025983\n",
        "> ",
        "B[1, 1:2] <- 4",
        "> ",
        "y0 <- X0 %*% B + matrix(rnorm(N*q), nrow = N, ncol = q)",
        "> ",
        "#y0 <- apply(y0, 2, scale)",
        "> ",
        "beta <- ps.edgwas(X0, y0)$beta",
        "> ",
        "# Sample 2",
        "> ",
        "X <- matrix(rbinom(n = N*p, size = 2, prob = 0.3), nrow=N, ncol=p)",
        "> ",
        "y <- X %*% B + matrix(rnorm(N*q), nrow = N, ncol = q)",
        "> ",
        "#y <- apply(y, 2, scale)",
        "> ",
        "#Sigma <- diag(1, q)",
        "> ",
        "#Sigma[1, 2] <- Sigma[2, 1] <- .8",
        "> ",
        "#y <- X %*% B + MASS::mvrnorm(n = N, mu = rep(0, q), Sigma = Sigma)",
        "> ",
        "x <- X %*% beta",
        "> ",
        "#x <- MASS::mvrnorm(n = N, mu = rep(0, q), Sigma = diag(1, q))",
        "> ",
        "edgwas.object <- edgwas(x, y, rho, nrho, logrho, rho.min.ratio)",
        "> ",
        "edgwas.object$call <- edgwas.call",
        "> ",
        "rho <- edgwas.object$rho",
        "> ",
        "PS <- edgwas.object$PS",
        "> ",
        "P <- edgwas.object$P",
        "> ",
        "Sigma <- edgwas.object$Sigma",
        "> ",
        "A <- edgwas.object$A",
        "> ",
        "foldid <- sample(rep(seq(nfolds), length = nrow(y)))",
        "> ",
        "outlist = vector(mode = \"list\", length = nfolds)",
        "> ",
        "for (i in seq(nfolds)) {",
        "+ ",
        "    fold <- foldid == i",
        "+ ",
        "",
        "+ ",
        "    yTrain <- y[!fold, ]",
        "+ ",
        "    xTrain <- PS[!fold, ]",
        "+ ",
        "",
        "+ ",
        "    outlist[[i]] <- edgwas(x = xTrain, y = yTrain, rho, nrho, logrho, rho.min.ratio)",
        "+ ",
        "  }",
        "> ",
        "cvraw <- vector(mode = \"list\", length = nrho)",
        "> ",
        "cvraw <- lapply(cvraw, FUN = function(l) matrix(NA, nrow(y), ncol(y)))",
        "> ",
        "cvmFold <- vector(mode = \"list\", length = nrho)",
        "> ",
        "cvmFold <- lapply(cvmFold, FUN = function(l) matrix(NA, nfolds, ncol(y)))",
        "> ",
        "fold <- foldid == i",
        "> ",
        "predsList <- predict(outlist[[i]], newPS = PS[fold, ], type = \"link\")",
        "> ",
        "j=1",
        "> ",
        "l=10",
        "> ",
        "ps0 <- PS[!fold, l]",
        "> ",
        "fit0 <- lm(y[!fold, l] ~ ps0)",
        "> ",
        "pred0 <- predict(fit0, newdata = data.frame(ps0 = PS[fold, l]))",
        "> ",
        "plot(predsList[[j]][,l]); points(pred0, col = 3); points(y[fold, l], col = 2) #",
        "> ",
        "mean((predsList[[j]][,l] - y[fold, l])^2); mean((pred0 - y[fold, l])^2)",
        "[1] 1.098539\n[1] 1.098493\n",
        "> ",
        "mean(predsList[[j]][,l]); mean(pred0); mean(y[fold, l])",
        "[1] 0.02806225\n[1] 0.02802047\n[1] 0.07678374\n",
        "> ",
        "sd(predsList[[j]][,l]); sd(pred0); sd(y[fold, l])",
        "[1] 0.01054637\n[1] 0.01065955\n[1] 1.054551\n",
        "> ",
        "np <- dim(x)",
        "> ",
        "if (is.null(np) | (np[2] <= 1))",
        "+ ",
        "stop(\"x should be a matrix with 2 or more columns\")",
        "> ",
        "nobs <- as.integer(np[1])",
        "> ",
        "nvars <- as.integer(np[2])",
        "> ",
        "dimy <- dim(y)",
        "> ",
        "nrowy <- ifelse(is.null(dimy), length(y), dimy[1])",
        "> ",
        "nouts <- ifelse(is.null(dimy), 1, dimy[2])",
        "> ",
        "if (nrowy != nobs)",
        "+ ",
        "stop(paste(\"number of observations in y (\", nrowy, \") not equal to the number of rows of x (\",",
        "+ ",
        "               nobs, \")\", sep = \"\"))",
        "> ",
        "if (nvars != nouts)",
        "+ ",
        "stop(paste(\"number of scores (\", nvars, \") not equal to number of outcome components (\", nouts, \")\", sep = \"\"))",
        "> ",
        "vnames <- colnames(x)",
        "> ",
        "if (is.null(vnames))",
        "+ ",
        "vnames <- paste(\"V\", seq(nvars), sep = \"\")",
        "> ",
        "if (is.null(rho)) {",
        "+ ",
        "    if (rho.min.ratio >= 1)",
        "+ ",
        "      stop(\"rho.min.ratio should be less than 1\")",
        "+ ",
        "    flmin <- as.double(rho.min.ratio)",
        "+ ",
        "    urho <- double(1)",
        "+ ",
        "    #rholist <- rho",
        "+ ",
        "    #nrho <- 10",
        "+ ",
        "  } else {",
        "+ ",
        "    nrho = as.integer(nrho)",
        "+ ",
        "    flmin <- as.double(1)",
        "+ ",
        "    if (any(rho < 0))",
        "+ ",
        "      stop(\"rhos should be non-negative\")",
        "+ ",
        "    urho <- as.double(rev(sort(rho)))",
        "+ ",
        "    nrho <- as.integer(length(rho))",
        "+ ",
        "    rholist <- as.double(rho)",
        "+ ",
        "  }",
        "> ",
        "xScale <- apply(x, 2, scale) #",
        "> ",
        "yScale <- apply(y, 2, scale) #y #",
        "> ",
        "####################",
        "> ",
        "  # STEP 2",
        "> ",
        "  ####################",
        "> ",
        "  # Covariance matrix (qxq) of PSs",
        "> ",
        "  SigmaPS <- cov(xScale) # cor(x) # cov(x) #cov(yScale) #",
        "> ",
        "# Calculate rho path (first get rho_max):",
        "> ",
        "  if (is.null(rho)) {",
        "+ ",
        "    rho_max <- max(colSums(SigmaPS))",
        "+ ",
        "    if(logrho == 0) {",
        "+ ",
        "      rholist <- round(seq(rho_max*flmin, rho_max,",
        "+ ",
        "                           length.out = nrho), digits = 10)",
        "+ ",
        "    } else if (logrho == 1) {",
        "+ ",
        "      rholist <- round(exp(seq(log(rho_max*flmin), log(rho_max),",
        "+ ",
        "                               length.out = nrho)), digits = 10)",
        "+ ",
        "    } else if (logrho == 2) {",
        "+ ",
        "      rholist <- round(log(seq(exp(rho_max*flmin), exp(rho_max),",
        "+ ",
        "                               length.out = nrho)), digits = 10)",
        "+ ",
        "    }",
        "+ ",
        "  } else {",
        "+ ",
        "    rholist <- rho",
        "+ ",
        "  }",
        "> ",
        "# Graphical lasso",
        "> ",
        "  # Estimates a sparse inverse covariance matrix using a lasso (L1) penalty",
        "> ",
        "  #glPS <- glasso::glassopath(s = SigmaPS, rho = rholist,",
        "> ",
        "  #                            penalize.diagonal = FALSE, trace = 0)",
        "> ",
        "  glPS2 <- lapply(seq_along(rholist), FUN = function(r) {",
        "+ ",
        "    glasso::glasso(s = SigmaPS, rho = rholist[r],",
        "+ ",
        "                   penalize.diagonal = FALSE,",
        "+ ",
        "                   trace = 0)",
        "+ ",
        "  })",
        "> ",
        "rho <- rholist",
        "> ",
        "P <- lapply(seq_along(rho), function(r) glPS2[[r]]$wi)",
        "> ",
        "Sigma <- lapply(seq_along(rho), function(r) glPS2[[r]]$w)",
        "> ",
        "A <- lapply(seq_along(rho), function(r) {",
        "+ ",
        "    AA <- P[[r]]",
        "+ ",
        "    AA[abs(AA) > 1.5e-8] <- 1",
        "+ ",
        "    #diag(AA) <- 0",
        "+ ",
        "    AA[lower.tri(AA, diag = TRUE)] <- 0",
        "+ ",
        "    AA",
        "+ ",
        "  })",
        "> ",
        "summarylist <- list(NULL)",
        "> ",
        "j",
        "[1] 1\n",
        "> ",
        "A[[j]]",
        "      [,1] [,2] [,3] [,4] [,5] [,6] [,7] [,8] [,9] [,10]\n [1,]    0    1    1    1    1    1    1    1    1     1\n [2,]    0    0    1    1    1    1    1    1    1     0\n [3,]    0    0    0    1    0    1    1    1    1     1\n [4,]    0    0    0    0    1    1    1    1    1     1\n [5,]    0    0    0    0    0    1    1    1    1     1\n [6,]    0    0    0    0    0    0    1    1    1     1\n [7,]    0    0    0    0    0    0    0    1    1     1\n [8,]    0    0    0    0    0    0    0    0    0     1",
        "\n [9,]    0    0    0    0    0    0    0    0    0     1\n[10,]    0    0    0    0    0    0    0    0    0     0\n",
        "> ",
        "individual <- rep(1:nrow(y), nouts)",
        "> ",
        "traitID <- as.factor(rep(1:nouts, each = nrow(y)))",
        "> ",
        "yVec <- as.vector(y)",
        "> ",
        "xVec <- as.vector(x)",
        "> ",
        "g  <- graph.adjacency(A[[j]])",
        "Error in graph.adjacency(A[[j]]) : \n  could not find function \"graph.adjacency\"\n",
        "> ",
        "g  <- igraph::graph.adjacency(A[[j]])",
        "> ",
        "df <- igraph::get.data.frame(g)",
        "> ",
        "clu <- igraph::components(g)",
        "> ",
        "gr <- matrix(1:(nobs*clu$no), ncol = clu$no)",
        "> ",
        "group <- as.vector(mapply(clu$membership, FUN = function(x) gr[,x]))",
        "> ",
        "summarylist[[j]] <- lmer(yVec ~ xVec*traitID + (1 | group),",
        "+ ",
        "                             weights=varIdent(form = ~ 1 | group)) # + (1 | individual)",
        "Error in lmer(yVec ~ xVec * traitID + (1 | group), weights = varIdent(form = ~1 |  : \n  could not find function \"lmer\"\n",
        "> ",
        "summarylist[[j]] <- lme4::lmer(yVec ~ xVec*traitID + (1 | group),",
        "+ ",
        "                             weights=varIdent(form = ~ 1 | group)) # + (1 | individual)",
        "Error in varIdent(form = ~1 | group) : could not find function \"varIdent\"\n",
        "> ",
        "summarylist[[j]] <- lme4::lmer(yVec ~ xVec*traitID + (1 | group),",
        "+ ",
        "                             weights = igraph::varIdent(form = ~ 1 | group)) # + (1 | individual)",
        "Error: 'varIdent' is not an exported object from 'namespace:igraph'\n",
        "> ",
        "summarylist[[j]] <- lme4::lmer(yVec ~ xVec*traitID + (1 | group),",
        "+ ",
        "                             weights = lme4::varIdent(form = ~ 1 | group)) # + (1 | individual)",
        "Error: 'varIdent' is not an exported object from 'namespace:lme4'\n",
        "> ",
        "?varIdent",
        "> ",
        "library(lme4)",
        "Loading required package: Matrix\n",
        "> ",
        "?lmer",
        "> ",
        "summarylist[[j]] <- nlme::lmer(yVec ~ xVec*traitID + (1 | group),",
        "+ ",
        "                             weights = nlme::varIdent(form = ~ 1 | group)) # + (1 | individual)",
        "Error: 'lmer' is not an exported object from 'namespace:nlme'\n",
        "> ",
        "?nlme",
        "> ",
        "summarylist[[j]] <- nlme::nlme(yVec ~ xVec*traitID + (1 | group),",
        "+ ",
        "                             weights = nlme::varIdent(form = ~ 1 | group)) # + (1 | individual)",
        "Error in nlme.formula(yVec ~ xVec * traitID + (1 | group), weights = nlme::varIdent(form = ~1 |  : \n  argument \"fixed\" is missing, with no default\n",
        "> ",
        "?lme",
        "> ",
        "summarylist[[j]] <- nlme::lme(yVec ~ xVec*traitID + (1 | group),",
        "+ ",
        "                             weights = nlme::varIdent(form = ~ 1 | group)) # + (1 | individual)",
        "Error in getGroups.data.frame(dataMix, groups) : \n  invalid formula for groups\n",
        "> ",
        "summarylist[[j]] <- nlme::lme(fixed = yVec ~ xVec*traitID,",
        "+ ",
        "                                  random =  ~ 1 | group,",
        "+ ",
        "                                  weights = nlme::varIdent(form = ~ 1 | group)) # + (1 | individual)",
        "\n",
        "\nRestarting R session...\n\n\nRestarting R session...\n\n\nRestarting R session...\n\n",
        "> ",
        "library(EdGwas)",
        "> ",
        "N <- 1000 #",
        "> ",
        "q <- 10 #",
        "> ",
        "p <- 1000 #",
        "> ",
        "set.seed(1)",
        "> ",
        "# Sample 1",
        "> ",
        "X0 <- matrix(rbinom(n = N*p, size = 2, prob = 0.3), nrow=N, ncol=p)",
        "> ",
        "B <- matrix(0, nrow = p, ncol = q)",
        "> ",
        "B[1, 1:2] <- 4",
        "> ",
        "y0 <- X0 %*% B + matrix(rnorm(N*q), nrow = N, ncol = q)",
        "> ",
        "#y0 <- apply(y0, 2, scale)",
        "> ",
        "beta <- ps.edgwas(X0, y0)$beta",
        "> ",
        "# Sample 2",
        "> ",
        "X <- matrix(rbinom(n = N*p, size = 2, prob = 0.3), nrow=N, ncol=p)",
        "> ",
        "y <- X %*% B + matrix(rnorm(N*q), nrow = N, ncol = q)",
        "> ",
        "#y <- apply(y, 2, scale)",
        "> ",
        "#Sigma <- diag(1, q)",
        "> ",
        "#Sigma[1, 2] <- Sigma[2, 1] <- .8",
        "> ",
        "#y <- X %*% B + MASS::mvrnorm(n = N, mu = rep(0, q), Sigma = Sigma)",
        "> ",
        "x <- X %*% beta",
        "> ",
        "#x <- MASS::mvrnorm(n = N, mu = rep(0, q), Sigma = diag(1, q))",
        "> ",
        "rho = NULL",
        "> ",
        "nfolds = 10",
        "> ",
        "nrho = ifelse(is.null(rho), 40, length(rho))",
        "> ",
        "logrho = FALSE",
        "> ",
        "rho.min.ratio = 10e-04",
        "> ",
        "edgwas.call <- match.call(expand.dots = TRUE)",
        "> ",
        "edgwas.call[[1]] <- as.name(\"edgwas\")",
        "> ",
        "edgwas.object <- edgwas(x, y, rho, nrho, logrho, rho.min.ratio)",
        "> ",
        "edgwas.object$call <- edgwas.call",
        "> ",
        "rho <- edgwas.object$rho",
        "> ",
        "PS <- edgwas.object$PS",
        "> ",
        "P <- edgwas.object$P",
        "> ",
        "Sigma <- edgwas.object$Sigma",
        "> ",
        "A <- edgwas.object$A",
        "> ",
        "foldid <- sample(rep(seq(nfolds), length = nrow(y)))",
        "> ",
        "outlist = vector(mode = \"list\", length = nfolds)",
        "> ",
        "for (i in seq(nfolds)) {",
        "+ ",
        "    fold <- foldid == i",
        "+ ",
        "",
        "+ ",
        "    yTrain <- y[!fold, ]",
        "+ ",
        "    xTrain <- PS[!fold, ]",
        "+ ",
        "",
        "+ ",
        "    outlist[[i]] <- edgwas(x = xTrain, y = yTrain, rho, nrho, logrho, rho.min.ratio)",
        "+ ",
        "  }",
        "> ",
        "cvraw <- vector(mode = \"list\", length = nrho)",
        "> ",
        "cvraw <- lapply(cvraw, FUN = function(l) matrix(NA, nrow(y), ncol(y)))",
        "> ",
        "cvmFold <- vector(mode = \"list\", length = nrho)",
        "> ",
        "cvmFold <- lapply(cvmFold, FUN = function(l) matrix(NA, nfolds, ncol(y)))",
        "> ",
        "fold <- foldid == i",
        "> ",
        "predsList <- predict(outlist[[i]], newPS = PS[fold, ], type = \"link\")",
        "> ",
        "l=10",
        "> ",
        "ytest <- scale(y[fold, l]) # y[fold, l]",
        "> ",
        "ps0 <- PS[!fold, l]",
        "> ",
        "fit0 <- lm(scale(y[!fold, l]) ~ ps0)",
        "> ",
        "pred0 <- predict(fit0, newdata = data.frame(ps0 = PS[fold, l]))",
        "> ",
        "plot(predsList[[j]][,l]); points(pred0, col = 3); points(ytest, col = 2) #",
        "Error in plot(predsList[[j]][, l]) : object 'j' not found\n",
        "> ",
        "j=1",
        "> ",
        "plot(predsList[[j]][,l]); points(pred0, col = 3); points(ytest, col = 2) #",
        "> ",
        "plot(predsList[[j]][,l])",
        "> ",
        "points(pred0, col = 3)",
        "> ",
        "mean((predsList[[j]][,l] - ytest)^2); mean((pred0 - ytest)^2)",
        "[1] 0.9898324\n[1] 0.9899229\n",
        "> ",
        "mean(predsList[[j]][,l]); mean(pred0); mean(ytest)",
        "[1] 8.151138e-05\n[1] 3.687055e-05\n[1] -4.167673e-18\n",
        "> ",
        "sd(predsList[[j]][,l]); sd(pred0); sd(ytest)",
        "[1] 0.002293172\n[1] 0.001037285\n[1] 1\n",
        "> ",
        "l=1#10",
        "> ",
        "ytest <- scale(y[fold, l]) # y[fold, l]",
        "> ",
        "ps0 <- PS[!fold, l]",
        "> ",
        "fit0 <- lm(scale(y[!fold, l]) ~ ps0)",
        "> ",
        "pred0 <- predict(fit0, newdata = data.frame(ps0 = PS[fold, l]))",
        "> ",
        "plot(predsList[[j]][,l]); points(pred0, col = 3); points(ytest, col = 2) #",
        "> ",
        "plot(predsList[[j]][,l])",
        "> ",
        "points(pred0, col = 3)",
        "> ",
        "points(ytest, col = 2)",
        "> ",
        "mean((predsList[[j]][,l] - ytest)^2); mean((pred0 - ytest)^2)",
        "[1] 0.7270051\n[1] 0.7268843\n",
        "> ",
        "j",
        "[1] 1\n",
        "> ",
        "mean(predsList[[j]][,l]); mean(pred0); mean(ytest)",
        "[1] 0.1938092\n[1] 0.1936282\n[1] -7.292777e-17\n",
        "> ",
        "sd(predsList[[j]][,l]); sd(pred0); sd(ytest)",
        "[1] 0.5990064\n[1] 0.598447\n[1] 1\n\nRestarting R session...\n\n"
    ],
    "type" : [
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        3,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        3,
        0,
        1,
        2,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        3,
        0,
        1,
        0,
        1,
        0,
        1,
        2,
        2,
        2,
        2,
        2,
        2,
        2,
        2,
        2,
        2,
        2,
        2,
        2,
        2,
        2,
        2,
        2,
        2,
        2,
        2,
        2,
        2,
        2,
        2,
        2,
        2,
        2,
        2,
        2,
        0,
        1,
        2,
        2,
        2,
        2,
        2,
        2,
        2,
        2,
        2,
        2,
        2,
        2,
        2,
        2,
        2,
        2,
        2,
        2,
        2,
        2,
        2,
        2,
        2,
        2,
        2,
        2,
        2,
        2,
        2,
        2,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        3,
        0,
        1,
        0,
        1,
        3,
        0,
        1,
        2,
        0,
        1,
        2,
        0,
        1,
        2,
        0,
        1,
        2,
        0,
        1,
        2,
        0,
        1,
        2,
        0,
        1,
        0,
        1,
        2,
        2,
        0,
        1,
        0,
        1,
        2,
        2,
        0,
        1,
        0,
        1,
        2,
        0,
        1,
        2,
        0,
        1,
        2,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        2,
        0,
        1,
        2,
        2,
        0,
        1,
        2,
        0,
        1,
        2,
        2,
        0,
        1,
        2,
        0,
        1,
        2,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        2,
        0,
        1,
        2,
        0,
        1,
        2,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        2,
        0,
        1,
        2,
        2,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        3,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        3,
        0,
        1,
        0,
        1,
        3,
        0,
        1,
        0,
        1,
        3,
        0,
        1,
        0,
        1,
        3,
        0,
        1,
        0,
        1,
        3,
        0,
        1,
        0,
        1,
        0,
        1,
        3,
        0,
        1,
        0,
        1,
        0,
        1,
        3,
        0,
        1,
        0,
        1,
        0,
        1,
        3,
        0,
        1,
        0,
        1,
        0,
        1,
        3,
        2,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        3,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        2,
        0,
        1,
        2,
        0,
        1,
        2,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        2,
        0,
        1,
        2,
        0,
        1,
        2,
        0,
        1,
        2
    ]
}